
BlowerRamping.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ece  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00800060  00001ece  00001f62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  00800164  00800164  00002066  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002068  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002734  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  000027b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00002819  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000d62  00000000  00000000  00002a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000043a  00000000  00000000  0000376b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000009e9  00000000  00000000  00003ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000b0  00000000  00000000  00004590  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000424  00000000  00000000  00004640  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cb6  00000000  00000000  00004a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  0000571a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2d c0       	rjmp	.+90     	; 0x5c <__ctors_end>
       2:	47 c0       	rjmp	.+142    	; 0x92 <__bad_interrupt>
       4:	46 c0       	rjmp	.+140    	; 0x92 <__bad_interrupt>
       6:	45 c0       	rjmp	.+138    	; 0x92 <__bad_interrupt>
       8:	44 c0       	rjmp	.+136    	; 0x92 <__bad_interrupt>
       a:	43 c0       	rjmp	.+134    	; 0x92 <__bad_interrupt>
       c:	53 c3       	rjmp	.+1702   	; 0x6b4 <__vector_6>
       e:	41 c0       	rjmp	.+130    	; 0x92 <__bad_interrupt>
      10:	40 c0       	rjmp	.+128    	; 0x92 <__bad_interrupt>
      12:	3f c0       	rjmp	.+126    	; 0x92 <__bad_interrupt>
      14:	3e c0       	rjmp	.+124    	; 0x92 <__bad_interrupt>
      16:	3d c0       	rjmp	.+122    	; 0x92 <__bad_interrupt>
      18:	3c c0       	rjmp	.+120    	; 0x92 <__bad_interrupt>
      1a:	87 c0       	rjmp	.+270    	; 0x12a <__vector_13>
      1c:	3a c0       	rjmp	.+116    	; 0x92 <__bad_interrupt>
      1e:	39 c0       	rjmp	.+114    	; 0x92 <__bad_interrupt>
      20:	38 c0       	rjmp	.+112    	; 0x92 <__bad_interrupt>

00000022 <aFWID>:
      22:	42 6c 6f 77 65 72 20 52 61 6d 70 69 6e 67 20 41     Blower Ramping A
      32:	54 74 69 6e 79 38 34 20 56 31 2e 30 20 28 63 29     Ttiny84 V1.0 (c)
      42:	20 4d 52 55 20 32 30 2e 31 30 2e 32 30 31 30 20      MRU 20.10.2010 
      52:	31 37 3a 32 31 20 55 68 72 00                       17:21 Uhr.

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf e5       	ldi	r28, 0x5F	; 95
      62:	d2 e0       	ldi	r29, 0x02	; 2
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e6       	ldi	r26, 0x60	; 96
      6c:	b0 e0       	ldi	r27, 0x00	; 0
      6e:	ee ec       	ldi	r30, 0xCE	; 206
      70:	fe e1       	ldi	r31, 0x1E	; 30
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a4 36       	cpi	r26, 0x64	; 100
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	11 e0       	ldi	r17, 0x01	; 1
      80:	a4 e6       	ldi	r26, 0x64	; 100
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	af 39       	cpi	r26, 0x9F	; 159
      8a:	b1 07       	cpc	r27, r17
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	60 d6       	rcall	.+3264   	; 0xd50 <main>
      90:	1c cf       	rjmp	.-456    	; 0xfffffeca <__eeprom_end+0xff7efeca>

00000092 <__bad_interrupt>:
      92:	b6 cf       	rjmp	.-148    	; 0x0 <__vectors>

00000094 <InitHardware>:

void InitHardware(void)
{
    // ==== Portpins ====
    // CPU LED is output
    DDR_LED_CPU = DDR_LED_CPU | _BV(BIT_LED_CPU);
      94:	ea e3       	ldi	r30, 0x3A	; 58
      96:	f0 e0       	ldi	r31, 0x00	; 0
      98:	80 81       	ld	r24, Z
      9a:	80 61       	ori	r24, 0x10	; 16
      9c:	80 83       	st	Z, r24

    // Status LED is output
    DDR_LED_STAT = DDR_LED_STAT | _BV(BIT_LED_STAT);
      9e:	80 81       	ld	r24, Z
      a0:	80 62       	ori	r24, 0x20	; 32
      a2:	80 83       	st	Z, r24
    PORT_LED_STAT = PORT_LED_STAT | _BV(BIT_LED_STAT);  // LED off (active low)
      a4:	ab e3       	ldi	r26, 0x3B	; 59
      a6:	b0 e0       	ldi	r27, 0x00	; 0
      a8:	8c 91       	ld	r24, X
      aa:	80 62       	ori	r24, 0x20	; 32
      ac:	8c 93       	st	X, r24

    // external status is output
    DDR_LED_EXSTAT = DDR_LED_EXSTAT | _BV(BIT_LED_EXSTAT);
      ae:	80 81       	ld	r24, Z
      b0:	88 60       	ori	r24, 0x08	; 8
      b2:	80 83       	st	Z, r24
    PORT_LED_EXSTAT = PORT_LED_EXSTAT & ~_BV(BIT_LED_EXSTAT);  // ext. stat off
      b4:	8c 91       	ld	r24, X
      b6:	87 7f       	andi	r24, 0xF7	; 247
      b8:	8c 93       	st	X, r24

    // SWM enable pin is output
    DDR_SWM_EN = DDR_SWM_EN | _BV(BIT_SWM_EN);
      ba:	80 81       	ld	r24, Z
      bc:	84 60       	ori	r24, 0x04	; 4
      be:	80 83       	st	Z, r24
    PORT_SWM_EN = PORT_SWM_EN | _BV(BIT_SWM_EN);  // SWM enable off (is active low)
      c0:	8c 91       	ld	r24, X
      c2:	84 60       	ori	r24, 0x04	; 4
      c4:	8c 93       	st	X, r24

    // PWM pin is output
    DDR_PWM = DDR_PWM | _BV(BIT_PWM);
      c6:	80 81       	ld	r24, Z
      c8:	80 68       	ori	r24, 0x80	; 128
      ca:	80 83       	st	Z, r24
    PORT_PWM = PORT_PWM & ~_BV(BIT_PWM);    // turn off DAC
      cc:	8c 91       	ld	r24, X
      ce:	8f 77       	andi	r24, 0x7F	; 127
      d0:	8c 93       	st	X, r24

    // ERROR Pins on PB are input;
    DDRB = 0x00;
      d2:	17 ba       	out	0x17, r1	; 23

    // enable Pullups on PB0 to PB2
    PORTB = 0x07;
      d4:	87 e0       	ldi	r24, 0x07	; 7
      d6:	88 bb       	out	0x18, r24	; 24
    
    // ==== ADC Stuff below ====
    // prepare ADC (disconnect digital port)
    DIDR0 = DIDR0 | _BV(ADC0D);
      d8:	e1 e2       	ldi	r30, 0x21	; 33
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	81 60       	ori	r24, 0x01	; 1
      e0:	80 83       	st	Z, r24

    // MUX & Ref
    ADMUX = 0x00;   // Channel0, VCC as reference
      e2:	17 b8       	out	0x07, r1	; 7

    // Auto Trigger Source = free running, left adjust 10bit 
    ADCSRB = _BV(ADLAR);
      e4:	80 e1       	ldi	r24, 0x10	; 16
      e6:	83 b9       	out	0x03, r24	; 3

    // Prescaler 1:128, free running mode, enable ADC, 62,5KHz Sample Rate
    ADCSRA = _BV(ADEN) | _BV(ADSC) | _BV(ADATE) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
      e8:	8f ee       	ldi	r24, 0xEF	; 239
      ea:	86 b9       	out	0x06, r24	; 6

    // ==== PWM Output on OC0B (PA7) ====
    TCCR0A = (1<<COM0B1) | (1<<WGM01) | (1<<WGM00); // 0xA3 Mode 3 Fast-PWM TOP=0xFF
      ec:	83 e2       	ldi	r24, 0x23	; 35
      ee:	80 bf       	out	0x30, r24	; 48
    TCCR0B = (1<<CS00);  // no prescaler -> 31250 Hz PWM frequency
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	83 bf       	out	0x33, r24	; 51

    OCR0B = 0x00;
      f4:	1c be       	out	0x3c, r1	; 60

};
      f6:	08 95       	ret

000000f8 <InitTimer1CompareAInt>:

void InitTimer1CompareAInt(void)
{
    TIFR0 |= (1<<OCF1A);                // Interrupt Request loeschen
      f8:	e8 e5       	ldi	r30, 0x58	; 88
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	82 60       	ori	r24, 0x02	; 2
     100:	80 83       	st	Z, r24
    TIMSK1 |= (1<<OCIE1A);              // Enable Output Compare A Interrupt
     102:	ec e2       	ldi	r30, 0x2C	; 44
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	80 81       	ld	r24, Z
     108:	82 60       	ori	r24, 0x02	; 2
     10a:	80 83       	st	Z, r24

    OCR1AH = 124 >> 8;                // CompareTime (16bit) 
     10c:	1b bc       	out	0x2b, r1	; 43
    OCR1AL = 124 & 0xFF;              // CompareTime (16bit) 
     10e:	8c e7       	ldi	r24, 0x7C	; 124
     110:	8a bd       	out	0x2a, r24	; 42

    TCNT1 = 0;
     112:	1d bc       	out	0x2d, r1	; 45
     114:	1c bc       	out	0x2c, r1	; 44
    TCCR1B   |= 1 << WGM12;             // CTC Mode 4 (16bit CTC)
     116:	ee e4       	ldi	r30, 0x4E	; 78
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	80 81       	ld	r24, Z
     11c:	88 60       	ori	r24, 0x08	; 8
     11e:	80 83       	st	Z, r24

    TCCR1B   |= (1<<CS01) | (1<<CS00);  // 64 prescaler, Timer0 Start
     120:	80 81       	ld	r24, Z
     122:	83 60       	ori	r24, 0x03	; 3
     124:	80 83       	st	Z, r24
    sei();
     126:	78 94       	sei
}
     128:	08 95       	ret

0000012a <__vector_13>:
    DebounceKeys();
}

// ADC interrupt
ISR(ADC_vect)
{
     12a:	1f 92       	push	r1
     12c:	0f 92       	push	r0
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	0f 92       	push	r0
     132:	11 24       	eor	r1, r1
     134:	2f 93       	push	r18
     136:	3f 93       	push	r19
     138:	4f 93       	push	r20
     13a:	5f 93       	push	r21
     13c:	6f 93       	push	r22
     13e:	7f 93       	push	r23
     140:	8f 93       	push	r24
     142:	9f 93       	push	r25
     144:	af 93       	push	r26
     146:	bf 93       	push	r27
     148:	ef 93       	push	r30
     14a:	ff 93       	push	r31
     14c:	df 93       	push	r29
     14e:	cf 93       	push	r28
     150:	0f 92       	push	r0
     152:	cd b7       	in	r28, 0x3d	; 61
     154:	de b7       	in	r29, 0x3e	; 62
    unsigned int uiLoop;
    unsigned int uiSumm;

    // read sample from ADH
    // we only have 8bit PWM, so 8bit ADC is sufficient
    volatile unsigned char ucCurrentSample = ADCH;
     156:	85 b1       	in	r24, 0x05	; 5
     158:	89 83       	std	Y+1, r24	; 0x01
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 e0       	ldi	r25, 0x00	; 0
    // value in Index 0 gets lost, MAX_ADC_HIST-1 gets free for
    // current sample

    for(uiLoop = 1; uiLoop < MAX_ADC_HIST; uiLoop++)
    {
        aRunningAverageBuffer[uiLoop-1] = aRunningAverageBuffer[uiLoop];
     15e:	25 e6       	ldi	r18, 0x65	; 101
     160:	31 e0       	ldi	r19, 0x01	; 1
    unsigned int uiLoop;
    unsigned int uiSumm;

    // read sample from ADH
    // we only have 8bit PWM, so 8bit ADC is sufficient
    volatile unsigned char ucCurrentSample = ADCH;
     162:	fc 01       	movw	r30, r24
     164:	31 97       	sbiw	r30, 0x01	; 1
    // value in Index 0 gets lost, MAX_ADC_HIST-1 gets free for
    // current sample

    for(uiLoop = 1; uiLoop < MAX_ADC_HIST; uiLoop++)
    {
        aRunningAverageBuffer[uiLoop-1] = aRunningAverageBuffer[uiLoop];
     166:	d9 01       	movw	r26, r18
     168:	a8 0f       	add	r26, r24
     16a:	b9 1f       	adc	r27, r25
     16c:	4c 91       	ld	r20, X
     16e:	e2 0f       	add	r30, r18
     170:	f3 1f       	adc	r31, r19
     172:	40 83       	st	Z, r20

    // move all values one index to the front
    // value in Index 0 gets lost, MAX_ADC_HIST-1 gets free for
    // current sample

    for(uiLoop = 1; uiLoop < MAX_ADC_HIST; uiLoop++)
     174:	01 96       	adiw	r24, 0x01	; 1
     176:	84 31       	cpi	r24, 0x14	; 20
     178:	91 05       	cpc	r25, r1
     17a:	99 f7       	brne	.-26     	; 0x162 <__vector_13+0x38>
    {
        aRunningAverageBuffer[uiLoop-1] = aRunningAverageBuffer[uiLoop];
    };

    // current sample on last index
    aRunningAverageBuffer[(MAX_ADC_HIST-1)] = ucCurrentSample;
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	80 93 78 01 	sts	0x0178, r24
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
    uiSumm = 0;
    
    // add up all data
    for(uiLoop=0;uiLoop<MAX_ADC_HIST; uiLoop++)
    {
        uiSumm = uiSumm + aRunningAverageBuffer[uiLoop];
     18a:	65 e6       	ldi	r22, 0x65	; 101
     18c:	71 e0       	ldi	r23, 0x01	; 1
     18e:	fb 01       	movw	r30, r22
     190:	e2 0f       	add	r30, r18
     192:	f3 1f       	adc	r31, r19
     194:	40 81       	ld	r20, Z
     196:	84 0f       	add	r24, r20
     198:	91 1d       	adc	r25, r1
    aRunningAverageBuffer[(MAX_ADC_HIST-1)] = ucCurrentSample;

    uiSumm = 0;
    
    // add up all data
    for(uiLoop=0;uiLoop<MAX_ADC_HIST; uiLoop++)
     19a:	2f 5f       	subi	r18, 0xFF	; 255
     19c:	3f 4f       	sbci	r19, 0xFF	; 255
     19e:	24 31       	cpi	r18, 0x14	; 20
     1a0:	31 05       	cpc	r19, r1
     1a2:	a9 f7       	brne	.-22     	; 0x18e <__vector_13+0x64>
    {
        uiSumm = uiSumm + aRunningAverageBuffer[uiLoop];
    };

    // update average
    ucADCMeanValue = (unsigned char)(uiSumm / MAX_ADC_HIST);        
     1a4:	64 e1       	ldi	r22, 0x14	; 20
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	0a de       	rcall	.-1004   	; 0xfffffdbe <__eeprom_end+0xff7efdbe>
     1aa:	60 93 87 01 	sts	0x0187, r22
}
     1ae:	0f 90       	pop	r0
     1b0:	cf 91       	pop	r28
     1b2:	df 91       	pop	r29
     1b4:	ff 91       	pop	r31
     1b6:	ef 91       	pop	r30
     1b8:	bf 91       	pop	r27
     1ba:	af 91       	pop	r26
     1bc:	9f 91       	pop	r25
     1be:	8f 91       	pop	r24
     1c0:	7f 91       	pop	r23
     1c2:	6f 91       	pop	r22
     1c4:	5f 91       	pop	r21
     1c6:	4f 91       	pop	r20
     1c8:	3f 91       	pop	r19
     1ca:	2f 91       	pop	r18
     1cc:	0f 90       	pop	r0
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	0f 90       	pop	r0
     1d2:	1f 90       	pop	r1
     1d4:	18 95       	reti

000001d6 <DebounceKeys>:


// Keyboard debouncing 
void DebounceKeys(void)
{
     1d6:	af 92       	push	r10
     1d8:	bf 92       	push	r11
     1da:	cf 92       	push	r12
     1dc:	df 92       	push	r13
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	df 93       	push	r29
     1e8:	cf 93       	push	r28
     1ea:	0f 92       	push	r0
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
	unsigned int uiLoop;
    volatile unsigned char  ucTempState;		// needed for array checking

	ucOldDebouncedState = ucDebouncedState;		// save old value to check if something has changed
     1f0:	80 91 7a 01 	lds	r24, 0x017A
     1f4:	80 93 79 01 	sts	0x0179, r24

    // read hardware here
	aKeyState[ucDebounceIndex] = (~(PINA & _BV(BIT_EN_INP))) & _BV(BIT_EN_INP);// we only process a single key (low active), mask rest
     1f8:	90 91 7c 01 	lds	r25, 0x017C
     1fc:	89 b3       	in	r24, 0x19	; 25
     1fe:	82 70       	andi	r24, 0x02	; 2
     200:	80 95       	com	r24
     202:	82 70       	andi	r24, 0x02	; 2
     204:	e1 e9       	ldi	r30, 0x91	; 145
     206:	f1 e0       	ldi	r31, 0x01	; 1
     208:	e9 0f       	add	r30, r25
     20a:	f1 1d       	adc	r31, r1
     20c:	80 83       	st	Z, r24
	++ucDebounceIndex;
     20e:	80 91 7c 01 	lds	r24, 0x017C
     212:	8f 5f       	subi	r24, 0xFF	; 255
     214:	80 93 7c 01 	sts	0x017C, r24

	ucTempState = 0xFF;
     218:	8f ef       	ldi	r24, 0xFF	; 255
     21a:	89 83       	std	Y+1, r24	; 0x01
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0

    // iterate through the last states and see if each
    // bit of each state is 1
	for(uiLoop=0; uiLoop < (MAX_KEY_CHECKS-1); uiLoop++)
		ucTempState = ucTempState & aKeyState[uiLoop];
     220:	41 e9       	ldi	r20, 0x91	; 145
     222:	51 e0       	ldi	r21, 0x01	; 1
     224:	fa 01       	movw	r30, r20
     226:	e8 0f       	add	r30, r24
     228:	f9 1f       	adc	r31, r25
     22a:	30 81       	ld	r19, Z
     22c:	29 81       	ldd	r18, Y+1	; 0x01
     22e:	23 23       	and	r18, r19
     230:	29 83       	std	Y+1, r18	; 0x01

	ucTempState = 0xFF;

    // iterate through the last states and see if each
    // bit of each state is 1
	for(uiLoop=0; uiLoop < (MAX_KEY_CHECKS-1); uiLoop++)
     232:	01 96       	adiw	r24, 0x01	; 1
     234:	84 30       	cpi	r24, 0x04	; 4
     236:	91 05       	cpc	r25, r1
     238:	a9 f7       	brne	.-22     	; 0x224 <DebounceKeys+0x4e>
		ucTempState = ucTempState & aKeyState[uiLoop];

	ucDebouncedState = ucTempState;
     23a:	89 81       	ldd	r24, Y+1	; 0x01
     23c:	80 93 7a 01 	sts	0x017A, r24

    // wrap around pointer 
	if(ucDebounceIndex >= MAX_KEY_CHECKS)
     240:	80 91 7c 01 	lds	r24, 0x017C
     244:	85 30       	cpi	r24, 0x05	; 5
     246:	10 f0       	brcs	.+4      	; 0x24c <DebounceKeys+0x76>
		ucDebounceIndex=0;
     248:	10 92 7c 01 	sts	0x017C, r1

    // check if external enable input changed
    if((ucOldDebouncedState & _BV(BIT_EN_INP)) != (ucDebouncedState & _BV(BIT_EN_INP)))
     24c:	80 91 79 01 	lds	r24, 0x0179
     250:	20 91 7a 01 	lds	r18, 0x017A
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	82 27       	eor	r24, r18
     25a:	93 27       	eor	r25, r19
     25c:	81 ff       	sbrs	r24, 1
     25e:	1e c2       	rjmp	.+1084   	; 0x69c <__stack+0x43d>
    {
        // check if it was a low to high transition
        if(ucDebouncedState & _BV(BIT_EN_INP))
     260:	80 91 7a 01 	lds	r24, 0x017A
     264:	81 ff       	sbrs	r24, 1
     266:	0d c1       	rjmp	.+538    	; 0x482 <__stack+0x223>
        {
            // transition from eRampedDown to eRampingUp
            if(eRampingState == eRampedDown)
     268:	80 91 7b 01 	lds	r24, 0x017B
     26c:	88 23       	and	r24, r24
     26e:	09 f0       	breq	.+2      	; 0x272 <__stack+0x13>
     270:	82 c0       	rjmp	.+260    	; 0x376 <__stack+0x117>
            {
                // ramp to current set point
                ucTargetSpeed = ucADCMeanValue;
     272:	80 91 87 01 	lds	r24, 0x0187
     276:	80 93 86 01 	sts	0x0186, r24

                // from current speed
                ucCurrentSpeed = OCR0B;
     27a:	8c b7       	in	r24, 0x3c	; 60
     27c:	80 93 88 01 	sts	0x0188, r24

                // calculate step sizes
                ullRampingTargetValue = RAMP_TIME_TICKS * (unsigned long long)ucTargetSpeed;
     280:	a0 90 86 01 	lds	r10, 0x0186
     284:	bb 24       	eor	r11, r11
     286:	cc 24       	eor	r12, r12
     288:	dd 24       	eor	r13, r13
     28a:	ee 24       	eor	r14, r14
     28c:	ff 24       	eor	r15, r15
     28e:	87 01       	movw	r16, r14
     290:	2a 2d       	mov	r18, r10
     292:	3b 2d       	mov	r19, r11
     294:	4c 2d       	mov	r20, r12
     296:	5d 2d       	mov	r21, r13
     298:	6e 2d       	mov	r22, r14
     29a:	7f 2d       	mov	r23, r15
     29c:	80 2f       	mov	r24, r16
     29e:	91 2f       	mov	r25, r17
     2a0:	aa 24       	eor	r10, r10
     2a2:	68 94       	set
     2a4:	a4 f8       	bld	r10, 4
     2a6:	0f 2e       	mov	r0, r31
     2a8:	f7 e2       	ldi	r31, 0x27	; 39
     2aa:	bf 2e       	mov	r11, r31
     2ac:	f0 2d       	mov	r31, r0
     2ae:	cc 24       	eor	r12, r12
     2b0:	dd 24       	eor	r13, r13
     2b2:	ee 24       	eor	r14, r14
     2b4:	ff 24       	eor	r15, r15
     2b6:	00 e0       	ldi	r16, 0x00	; 0
     2b8:	10 e0       	ldi	r17, 0x00	; 0
     2ba:	fb d5       	rcall	.+3062   	; 0xeb2 <__muldi3>
     2bc:	20 93 96 01 	sts	0x0196, r18
     2c0:	30 93 97 01 	sts	0x0197, r19
     2c4:	40 93 98 01 	sts	0x0198, r20
     2c8:	50 93 99 01 	sts	0x0199, r21
     2cc:	60 93 9a 01 	sts	0x019A, r22
     2d0:	70 93 9b 01 	sts	0x019B, r23
     2d4:	80 93 9c 01 	sts	0x019C, r24
     2d8:	90 93 9d 01 	sts	0x019D, r25
                ullRampingValue = RAMP_TIME_TICKS * (unsigned long long)ucCurrentSpeed;
     2dc:	a0 90 88 01 	lds	r10, 0x0188
     2e0:	bb 24       	eor	r11, r11
     2e2:	cc 24       	eor	r12, r12
     2e4:	dd 24       	eor	r13, r13
     2e6:	ee 24       	eor	r14, r14
     2e8:	ff 24       	eor	r15, r15
     2ea:	87 01       	movw	r16, r14
     2ec:	2a 2d       	mov	r18, r10
     2ee:	3b 2d       	mov	r19, r11
     2f0:	4c 2d       	mov	r20, r12
     2f2:	5d 2d       	mov	r21, r13
     2f4:	6e 2d       	mov	r22, r14
     2f6:	7f 2d       	mov	r23, r15
     2f8:	80 2f       	mov	r24, r16
     2fa:	91 2f       	mov	r25, r17
     2fc:	aa 24       	eor	r10, r10
     2fe:	68 94       	set
     300:	a4 f8       	bld	r10, 4
     302:	0f 2e       	mov	r0, r31
     304:	f7 e2       	ldi	r31, 0x27	; 39
     306:	bf 2e       	mov	r11, r31
     308:	f0 2d       	mov	r31, r0
     30a:	cc 24       	eor	r12, r12
     30c:	dd 24       	eor	r13, r13
     30e:	ee 24       	eor	r14, r14
     310:	ff 24       	eor	r15, r15
     312:	00 e0       	ldi	r16, 0x00	; 0
     314:	10 e0       	ldi	r17, 0x00	; 0
     316:	cd d5       	rcall	.+2970   	; 0xeb2 <__muldi3>
     318:	20 93 89 01 	sts	0x0189, r18
     31c:	30 93 8a 01 	sts	0x018A, r19
     320:	40 93 8b 01 	sts	0x018B, r20
     324:	50 93 8c 01 	sts	0x018C, r21
     328:	60 93 8d 01 	sts	0x018D, r22
     32c:	70 93 8e 01 	sts	0x018E, r23
     330:	80 93 8f 01 	sts	0x018F, r24
     334:	90 93 90 01 	sts	0x0190, r25

                llIncrement = (long long)(ucTargetSpeed-ucCurrentSpeed);
     338:	20 91 86 01 	lds	r18, 0x0186
     33c:	80 91 88 01 	lds	r24, 0x0188
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	28 1b       	sub	r18, r24
     344:	31 09       	sbc	r19, r1
     346:	c9 01       	movw	r24, r18
     348:	99 0f       	add	r25, r25
     34a:	88 0b       	sbc	r24, r24
     34c:	98 2f       	mov	r25, r24
     34e:	20 93 7d 01 	sts	0x017D, r18
     352:	30 93 7e 01 	sts	0x017E, r19
     356:	80 93 7f 01 	sts	0x017F, r24
     35a:	80 93 80 01 	sts	0x0180, r24
     35e:	80 93 81 01 	sts	0x0181, r24
     362:	80 93 82 01 	sts	0x0182, r24
     366:	80 93 83 01 	sts	0x0183, r24
     36a:	80 93 84 01 	sts	0x0184, r24

                eRampingState = eRampingUp;
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	80 93 7b 01 	sts	0x017B, r24
     374:	86 c0       	rjmp	.+268    	; 0x482 <__stack+0x223>
            }
            else
            // transition from eRampingDown to eRampingUp
            if(eRampingState == eRampingDown)
     376:	80 91 7b 01 	lds	r24, 0x017B
     37a:	83 30       	cpi	r24, 0x03	; 3
     37c:	09 f0       	breq	.+2      	; 0x380 <__stack+0x121>
     37e:	81 c0       	rjmp	.+258    	; 0x482 <__stack+0x223>
            {
                // ramp to current set point
                ucTargetSpeed = ucADCMeanValue;
     380:	80 91 87 01 	lds	r24, 0x0187
     384:	80 93 86 01 	sts	0x0186, r24

                // from current speed
                ucCurrentSpeed = OCR0B;
     388:	8c b7       	in	r24, 0x3c	; 60
     38a:	80 93 88 01 	sts	0x0188, r24

                // calculate step sizes
                ullRampingTargetValue = RAMP_TIME_TICKS * (unsigned long long)ucTargetSpeed;
     38e:	a0 90 86 01 	lds	r10, 0x0186
     392:	bb 24       	eor	r11, r11
     394:	cc 24       	eor	r12, r12
     396:	dd 24       	eor	r13, r13
     398:	ee 24       	eor	r14, r14
     39a:	ff 24       	eor	r15, r15
     39c:	87 01       	movw	r16, r14
     39e:	2a 2d       	mov	r18, r10
     3a0:	3b 2d       	mov	r19, r11
     3a2:	4c 2d       	mov	r20, r12
     3a4:	5d 2d       	mov	r21, r13
     3a6:	6e 2d       	mov	r22, r14
     3a8:	7f 2d       	mov	r23, r15
     3aa:	80 2f       	mov	r24, r16
     3ac:	91 2f       	mov	r25, r17
     3ae:	aa 24       	eor	r10, r10
     3b0:	68 94       	set
     3b2:	a4 f8       	bld	r10, 4
     3b4:	0f 2e       	mov	r0, r31
     3b6:	f7 e2       	ldi	r31, 0x27	; 39
     3b8:	bf 2e       	mov	r11, r31
     3ba:	f0 2d       	mov	r31, r0
     3bc:	cc 24       	eor	r12, r12
     3be:	dd 24       	eor	r13, r13
     3c0:	ee 24       	eor	r14, r14
     3c2:	ff 24       	eor	r15, r15
     3c4:	00 e0       	ldi	r16, 0x00	; 0
     3c6:	10 e0       	ldi	r17, 0x00	; 0
     3c8:	74 d5       	rcall	.+2792   	; 0xeb2 <__muldi3>
     3ca:	20 93 96 01 	sts	0x0196, r18
     3ce:	30 93 97 01 	sts	0x0197, r19
     3d2:	40 93 98 01 	sts	0x0198, r20
     3d6:	50 93 99 01 	sts	0x0199, r21
     3da:	60 93 9a 01 	sts	0x019A, r22
     3de:	70 93 9b 01 	sts	0x019B, r23
     3e2:	80 93 9c 01 	sts	0x019C, r24
     3e6:	90 93 9d 01 	sts	0x019D, r25
                ullRampingValue = RAMP_TIME_TICKS * (unsigned long long)ucCurrentSpeed;
     3ea:	a0 90 88 01 	lds	r10, 0x0188
     3ee:	bb 24       	eor	r11, r11
     3f0:	cc 24       	eor	r12, r12
     3f2:	dd 24       	eor	r13, r13
     3f4:	ee 24       	eor	r14, r14
     3f6:	ff 24       	eor	r15, r15
     3f8:	87 01       	movw	r16, r14
     3fa:	2a 2d       	mov	r18, r10
     3fc:	3b 2d       	mov	r19, r11
     3fe:	4c 2d       	mov	r20, r12
     400:	5d 2d       	mov	r21, r13
     402:	6e 2d       	mov	r22, r14
     404:	7f 2d       	mov	r23, r15
     406:	80 2f       	mov	r24, r16
     408:	91 2f       	mov	r25, r17
     40a:	aa 24       	eor	r10, r10
     40c:	68 94       	set
     40e:	a4 f8       	bld	r10, 4
     410:	0f 2e       	mov	r0, r31
     412:	f7 e2       	ldi	r31, 0x27	; 39
     414:	bf 2e       	mov	r11, r31
     416:	f0 2d       	mov	r31, r0
     418:	cc 24       	eor	r12, r12
     41a:	dd 24       	eor	r13, r13
     41c:	ee 24       	eor	r14, r14
     41e:	ff 24       	eor	r15, r15
     420:	00 e0       	ldi	r16, 0x00	; 0
     422:	10 e0       	ldi	r17, 0x00	; 0
     424:	46 d5       	rcall	.+2700   	; 0xeb2 <__muldi3>
     426:	20 93 89 01 	sts	0x0189, r18
     42a:	30 93 8a 01 	sts	0x018A, r19
     42e:	40 93 8b 01 	sts	0x018B, r20
     432:	50 93 8c 01 	sts	0x018C, r21
     436:	60 93 8d 01 	sts	0x018D, r22
     43a:	70 93 8e 01 	sts	0x018E, r23
     43e:	80 93 8f 01 	sts	0x018F, r24
     442:	90 93 90 01 	sts	0x0190, r25

                llIncrement = (long long)(ucTargetSpeed-ucCurrentSpeed);
     446:	20 91 86 01 	lds	r18, 0x0186
     44a:	80 91 88 01 	lds	r24, 0x0188
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	28 1b       	sub	r18, r24
     452:	31 09       	sbc	r19, r1
     454:	c9 01       	movw	r24, r18
     456:	99 0f       	add	r25, r25
     458:	88 0b       	sbc	r24, r24
     45a:	98 2f       	mov	r25, r24
     45c:	20 93 7d 01 	sts	0x017D, r18
     460:	30 93 7e 01 	sts	0x017E, r19
     464:	80 93 7f 01 	sts	0x017F, r24
     468:	80 93 80 01 	sts	0x0180, r24
     46c:	80 93 81 01 	sts	0x0181, r24
     470:	80 93 82 01 	sts	0x0182, r24
     474:	80 93 83 01 	sts	0x0183, r24
     478:	80 93 84 01 	sts	0x0184, r24
                eRampingState = eRampingUp;
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 7b 01 	sts	0x017B, r24
            };
        };

        // suspect it was a high to low transistion then...
        if(!(ucDebouncedState & _BV(BIT_EN_INP)))
     482:	80 91 7a 01 	lds	r24, 0x017A
     486:	81 fd       	sbrc	r24, 1
     488:	09 c1       	rjmp	.+530    	; 0x69c <__stack+0x43d>
        {
            if(eRampingState == eRampingUp)
     48a:	80 91 7b 01 	lds	r24, 0x017B
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	09 f0       	breq	.+2      	; 0x494 <__stack+0x235>
     492:	80 c0       	rjmp	.+256    	; 0x594 <__stack+0x335>
            {
                // ramp to zero
                ucTargetSpeed = 0;
     494:	10 92 86 01 	sts	0x0186, r1

                // from current speed
                ucCurrentSpeed = OCR0B;
     498:	8c b7       	in	r24, 0x3c	; 60
     49a:	80 93 88 01 	sts	0x0188, r24

                // calculate step sizes
                ullRampingTargetValue = RAMP_TIME_TICKS * (unsigned long long)ucTargetSpeed;
     49e:	a0 90 86 01 	lds	r10, 0x0186
     4a2:	bb 24       	eor	r11, r11
     4a4:	cc 24       	eor	r12, r12
     4a6:	dd 24       	eor	r13, r13
     4a8:	ee 24       	eor	r14, r14
     4aa:	ff 24       	eor	r15, r15
     4ac:	87 01       	movw	r16, r14
     4ae:	2a 2d       	mov	r18, r10
     4b0:	3b 2d       	mov	r19, r11
     4b2:	4c 2d       	mov	r20, r12
     4b4:	5d 2d       	mov	r21, r13
     4b6:	6e 2d       	mov	r22, r14
     4b8:	7f 2d       	mov	r23, r15
     4ba:	80 2f       	mov	r24, r16
     4bc:	91 2f       	mov	r25, r17
     4be:	aa 24       	eor	r10, r10
     4c0:	68 94       	set
     4c2:	a4 f8       	bld	r10, 4
     4c4:	0f 2e       	mov	r0, r31
     4c6:	f7 e2       	ldi	r31, 0x27	; 39
     4c8:	bf 2e       	mov	r11, r31
     4ca:	f0 2d       	mov	r31, r0
     4cc:	cc 24       	eor	r12, r12
     4ce:	dd 24       	eor	r13, r13
     4d0:	ee 24       	eor	r14, r14
     4d2:	ff 24       	eor	r15, r15
     4d4:	00 e0       	ldi	r16, 0x00	; 0
     4d6:	10 e0       	ldi	r17, 0x00	; 0
     4d8:	ec d4       	rcall	.+2520   	; 0xeb2 <__muldi3>
     4da:	20 93 96 01 	sts	0x0196, r18
     4de:	30 93 97 01 	sts	0x0197, r19
     4e2:	40 93 98 01 	sts	0x0198, r20
     4e6:	50 93 99 01 	sts	0x0199, r21
     4ea:	60 93 9a 01 	sts	0x019A, r22
     4ee:	70 93 9b 01 	sts	0x019B, r23
     4f2:	80 93 9c 01 	sts	0x019C, r24
     4f6:	90 93 9d 01 	sts	0x019D, r25
                ullRampingValue = RAMP_TIME_TICKS * (unsigned long long)ucCurrentSpeed;
     4fa:	a0 90 88 01 	lds	r10, 0x0188
     4fe:	bb 24       	eor	r11, r11
     500:	cc 24       	eor	r12, r12
     502:	dd 24       	eor	r13, r13
     504:	ee 24       	eor	r14, r14
     506:	ff 24       	eor	r15, r15
     508:	87 01       	movw	r16, r14
     50a:	2a 2d       	mov	r18, r10
     50c:	3b 2d       	mov	r19, r11
     50e:	4c 2d       	mov	r20, r12
     510:	5d 2d       	mov	r21, r13
     512:	6e 2d       	mov	r22, r14
     514:	7f 2d       	mov	r23, r15
     516:	80 2f       	mov	r24, r16
     518:	91 2f       	mov	r25, r17
     51a:	aa 24       	eor	r10, r10
     51c:	68 94       	set
     51e:	a4 f8       	bld	r10, 4
     520:	0f 2e       	mov	r0, r31
     522:	f7 e2       	ldi	r31, 0x27	; 39
     524:	bf 2e       	mov	r11, r31
     526:	f0 2d       	mov	r31, r0
     528:	cc 24       	eor	r12, r12
     52a:	dd 24       	eor	r13, r13
     52c:	ee 24       	eor	r14, r14
     52e:	ff 24       	eor	r15, r15
     530:	00 e0       	ldi	r16, 0x00	; 0
     532:	10 e0       	ldi	r17, 0x00	; 0
     534:	be d4       	rcall	.+2428   	; 0xeb2 <__muldi3>
     536:	20 93 89 01 	sts	0x0189, r18
     53a:	30 93 8a 01 	sts	0x018A, r19
     53e:	40 93 8b 01 	sts	0x018B, r20
     542:	50 93 8c 01 	sts	0x018C, r21
     546:	60 93 8d 01 	sts	0x018D, r22
     54a:	70 93 8e 01 	sts	0x018E, r23
     54e:	80 93 8f 01 	sts	0x018F, r24
     552:	90 93 90 01 	sts	0x0190, r25

                llIncrement = (long long)(ucCurrentSpeed-ucTargetSpeed);
     556:	20 91 88 01 	lds	r18, 0x0188
     55a:	80 91 86 01 	lds	r24, 0x0186
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	28 1b       	sub	r18, r24
     562:	31 09       	sbc	r19, r1
     564:	c9 01       	movw	r24, r18
     566:	99 0f       	add	r25, r25
     568:	88 0b       	sbc	r24, r24
     56a:	98 2f       	mov	r25, r24
     56c:	20 93 7d 01 	sts	0x017D, r18
     570:	30 93 7e 01 	sts	0x017E, r19
     574:	80 93 7f 01 	sts	0x017F, r24
     578:	80 93 80 01 	sts	0x0180, r24
     57c:	80 93 81 01 	sts	0x0181, r24
     580:	80 93 82 01 	sts	0x0182, r24
     584:	80 93 83 01 	sts	0x0183, r24
     588:	80 93 84 01 	sts	0x0184, r24

                eRampingState = eRampingDown;
     58c:	83 e0       	ldi	r24, 0x03	; 3
     58e:	80 93 7b 01 	sts	0x017B, r24
     592:	84 c0       	rjmp	.+264    	; 0x69c <__stack+0x43d>
            }
            else
            if(eRampingState == eRampedUp)
     594:	80 91 7b 01 	lds	r24, 0x017B
     598:	82 30       	cpi	r24, 0x02	; 2
     59a:	09 f0       	breq	.+2      	; 0x59e <__stack+0x33f>
     59c:	7f c0       	rjmp	.+254    	; 0x69c <__stack+0x43d>
            {
                // ramp to zero
                ucTargetSpeed = 0;
     59e:	10 92 86 01 	sts	0x0186, r1

                // from current speed
                ucCurrentSpeed = OCR0B;
     5a2:	8c b7       	in	r24, 0x3c	; 60
     5a4:	80 93 88 01 	sts	0x0188, r24

                // calculate step sizes
                ullRampingTargetValue = RAMP_TIME_TICKS * (unsigned long long)ucTargetSpeed;
     5a8:	a0 90 86 01 	lds	r10, 0x0186
     5ac:	bb 24       	eor	r11, r11
     5ae:	cc 24       	eor	r12, r12
     5b0:	dd 24       	eor	r13, r13
     5b2:	ee 24       	eor	r14, r14
     5b4:	ff 24       	eor	r15, r15
     5b6:	87 01       	movw	r16, r14
     5b8:	2a 2d       	mov	r18, r10
     5ba:	3b 2d       	mov	r19, r11
     5bc:	4c 2d       	mov	r20, r12
     5be:	5d 2d       	mov	r21, r13
     5c0:	6e 2d       	mov	r22, r14
     5c2:	7f 2d       	mov	r23, r15
     5c4:	80 2f       	mov	r24, r16
     5c6:	91 2f       	mov	r25, r17
     5c8:	aa 24       	eor	r10, r10
     5ca:	68 94       	set
     5cc:	a4 f8       	bld	r10, 4
     5ce:	0f 2e       	mov	r0, r31
     5d0:	f7 e2       	ldi	r31, 0x27	; 39
     5d2:	bf 2e       	mov	r11, r31
     5d4:	f0 2d       	mov	r31, r0
     5d6:	cc 24       	eor	r12, r12
     5d8:	dd 24       	eor	r13, r13
     5da:	ee 24       	eor	r14, r14
     5dc:	ff 24       	eor	r15, r15
     5de:	00 e0       	ldi	r16, 0x00	; 0
     5e0:	10 e0       	ldi	r17, 0x00	; 0
     5e2:	67 d4       	rcall	.+2254   	; 0xeb2 <__muldi3>
     5e4:	20 93 96 01 	sts	0x0196, r18
     5e8:	30 93 97 01 	sts	0x0197, r19
     5ec:	40 93 98 01 	sts	0x0198, r20
     5f0:	50 93 99 01 	sts	0x0199, r21
     5f4:	60 93 9a 01 	sts	0x019A, r22
     5f8:	70 93 9b 01 	sts	0x019B, r23
     5fc:	80 93 9c 01 	sts	0x019C, r24
     600:	90 93 9d 01 	sts	0x019D, r25
                ullRampingValue = RAMP_TIME_TICKS * (unsigned long long)ucCurrentSpeed;
     604:	a0 90 88 01 	lds	r10, 0x0188
     608:	bb 24       	eor	r11, r11
     60a:	cc 24       	eor	r12, r12
     60c:	dd 24       	eor	r13, r13
     60e:	ee 24       	eor	r14, r14
     610:	ff 24       	eor	r15, r15
     612:	87 01       	movw	r16, r14
     614:	2a 2d       	mov	r18, r10
     616:	3b 2d       	mov	r19, r11
     618:	4c 2d       	mov	r20, r12
     61a:	5d 2d       	mov	r21, r13
     61c:	6e 2d       	mov	r22, r14
     61e:	7f 2d       	mov	r23, r15
     620:	80 2f       	mov	r24, r16
     622:	91 2f       	mov	r25, r17
     624:	aa 24       	eor	r10, r10
     626:	68 94       	set
     628:	a4 f8       	bld	r10, 4
     62a:	0f 2e       	mov	r0, r31
     62c:	f7 e2       	ldi	r31, 0x27	; 39
     62e:	bf 2e       	mov	r11, r31
     630:	f0 2d       	mov	r31, r0
     632:	cc 24       	eor	r12, r12
     634:	dd 24       	eor	r13, r13
     636:	ee 24       	eor	r14, r14
     638:	ff 24       	eor	r15, r15
     63a:	00 e0       	ldi	r16, 0x00	; 0
     63c:	10 e0       	ldi	r17, 0x00	; 0
     63e:	39 d4       	rcall	.+2162   	; 0xeb2 <__muldi3>
     640:	20 93 89 01 	sts	0x0189, r18
     644:	30 93 8a 01 	sts	0x018A, r19
     648:	40 93 8b 01 	sts	0x018B, r20
     64c:	50 93 8c 01 	sts	0x018C, r21
     650:	60 93 8d 01 	sts	0x018D, r22
     654:	70 93 8e 01 	sts	0x018E, r23
     658:	80 93 8f 01 	sts	0x018F, r24
     65c:	90 93 90 01 	sts	0x0190, r25

                llIncrement = (long long)(ucCurrentSpeed-ucTargetSpeed);
     660:	20 91 88 01 	lds	r18, 0x0188
     664:	80 91 86 01 	lds	r24, 0x0186
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	28 1b       	sub	r18, r24
     66c:	31 09       	sbc	r19, r1
     66e:	c9 01       	movw	r24, r18
     670:	99 0f       	add	r25, r25
     672:	88 0b       	sbc	r24, r24
     674:	98 2f       	mov	r25, r24
     676:	20 93 7d 01 	sts	0x017D, r18
     67a:	30 93 7e 01 	sts	0x017E, r19
     67e:	80 93 7f 01 	sts	0x017F, r24
     682:	80 93 80 01 	sts	0x0180, r24
     686:	80 93 81 01 	sts	0x0181, r24
     68a:	80 93 82 01 	sts	0x0182, r24
     68e:	80 93 83 01 	sts	0x0183, r24
     692:	80 93 84 01 	sts	0x0184, r24

                eRampingState = eRampingDown;
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	80 93 7b 01 	sts	0x017B, r24
            };
        };
    };
}
     69c:	0f 90       	pop	r0
     69e:	cf 91       	pop	r28
     6a0:	df 91       	pop	r29
     6a2:	1f 91       	pop	r17
     6a4:	0f 91       	pop	r16
     6a6:	ff 90       	pop	r15
     6a8:	ef 90       	pop	r14
     6aa:	df 90       	pop	r13
     6ac:	cf 90       	pop	r12
     6ae:	bf 90       	pop	r11
     6b0:	af 90       	pop	r10
     6b2:	08 95       	ret

000006b4 <__vector_6>:
// ================================================================ 
// time management handler, called every 1ms via CTC mode interrupt
// ================================================================ 

ISR(TIM1_COMPA_vect)
{
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	af 92       	push	r10
     6c0:	bf 92       	push	r11
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	2f 93       	push	r18
     6d0:	3f 93       	push	r19
     6d2:	4f 93       	push	r20
     6d4:	5f 93       	push	r21
     6d6:	6f 93       	push	r22
     6d8:	7f 93       	push	r23
     6da:	8f 93       	push	r24
     6dc:	9f 93       	push	r25
     6de:	af 93       	push	r26
     6e0:	bf 93       	push	r27
     6e2:	ef 93       	push	r30
     6e4:	ff 93       	push	r31
    static unsigned int uiBlinkDelay = 500;
    static unsigned int uiMorseDelay = MORSE_SYNC_PAUSE;
    static unsigned char ucCode = 0;

    if(eRampingState == eRampingUp)
     6e6:	80 91 7b 01 	lds	r24, 0x017B
     6ea:	81 30       	cpi	r24, 0x01	; 1
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <__vector_6+0x3c>
     6ee:	06 c1       	rjmp	.+524    	; 0x8fc <__vector_6+0x248>
    {
        if(OCR0B == ucADCMeanValue)
     6f0:	9c b7       	in	r25, 0x3c	; 60
     6f2:	80 91 87 01 	lds	r24, 0x0187
     6f6:	98 17       	cp	r25, r24
     6f8:	21 f4       	brne	.+8      	; 0x702 <__vector_6+0x4e>
        {
            eRampingState = eRampedUp;
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	80 93 7b 01 	sts	0x017B, r24
     700:	fd c0       	rjmp	.+506    	; 0x8fc <__vector_6+0x248>
        }
        else
        {
            // add delta
            ullRampingValue = ullRampingValue + llIncrement;
     702:	e0 91 89 01 	lds	r30, 0x0189
     706:	40 91 8a 01 	lds	r20, 0x018A
     70a:	30 91 8b 01 	lds	r19, 0x018B
     70e:	20 91 8c 01 	lds	r18, 0x018C
     712:	90 91 8d 01 	lds	r25, 0x018D
     716:	80 91 8e 01 	lds	r24, 0x018E
     71a:	b0 90 8f 01 	lds	r11, 0x018F
     71e:	d0 90 90 01 	lds	r13, 0x0190
     722:	60 91 7d 01 	lds	r22, 0x017D
     726:	e0 90 7e 01 	lds	r14, 0x017E
     72a:	00 91 7f 01 	lds	r16, 0x017F
     72e:	10 91 80 01 	lds	r17, 0x0180
     732:	b0 91 81 01 	lds	r27, 0x0181
     736:	a0 91 82 01 	lds	r26, 0x0182
     73a:	f0 91 83 01 	lds	r31, 0x0183
     73e:	c0 90 84 01 	lds	r12, 0x0184
     742:	e6 0f       	add	r30, r22
     744:	51 e0       	ldi	r21, 0x01	; 1
     746:	e6 17       	cp	r30, r22
     748:	08 f0       	brcs	.+2      	; 0x74c <__vector_6+0x98>
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	4e 0d       	add	r20, r14
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	4e 15       	cp	r20, r14
     752:	08 f0       	brcs	.+2      	; 0x756 <__vector_6+0xa2>
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	f5 2e       	mov	r15, r21
     758:	f4 0e       	add	r15, r20
     75a:	51 e0       	ldi	r21, 0x01	; 1
     75c:	f4 16       	cp	r15, r20
     75e:	08 f0       	brcs	.+2      	; 0x762 <__vector_6+0xae>
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	65 2b       	or	r22, r21
     764:	4f 2d       	mov	r20, r15
     766:	30 0f       	add	r19, r16
     768:	71 e0       	ldi	r23, 0x01	; 1
     76a:	30 17       	cp	r19, r16
     76c:	08 f0       	brcs	.+2      	; 0x770 <__vector_6+0xbc>
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	63 0f       	add	r22, r19
     772:	51 e0       	ldi	r21, 0x01	; 1
     774:	63 17       	cp	r22, r19
     776:	08 f0       	brcs	.+2      	; 0x77a <__vector_6+0xc6>
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	75 2b       	or	r23, r21
     77c:	36 2f       	mov	r19, r22
     77e:	21 0f       	add	r18, r17
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	21 17       	cp	r18, r17
     784:	08 f0       	brcs	.+2      	; 0x788 <__vector_6+0xd4>
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	72 0f       	add	r23, r18
     78a:	51 e0       	ldi	r21, 0x01	; 1
     78c:	72 17       	cp	r23, r18
     78e:	08 f0       	brcs	.+2      	; 0x792 <__vector_6+0xde>
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	65 2b       	or	r22, r21
     794:	27 2f       	mov	r18, r23
     796:	9b 0f       	add	r25, r27
     798:	71 e0       	ldi	r23, 0x01	; 1
     79a:	9b 17       	cp	r25, r27
     79c:	08 f0       	brcs	.+2      	; 0x7a0 <__vector_6+0xec>
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	69 0f       	add	r22, r25
     7a2:	51 e0       	ldi	r21, 0x01	; 1
     7a4:	69 17       	cp	r22, r25
     7a6:	08 f0       	brcs	.+2      	; 0x7aa <__vector_6+0xf6>
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	75 2b       	or	r23, r21
     7ac:	96 2f       	mov	r25, r22
     7ae:	8a 0f       	add	r24, r26
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	8a 17       	cp	r24, r26
     7b4:	08 f0       	brcs	.+2      	; 0x7b8 <__vector_6+0x104>
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	78 0f       	add	r23, r24
     7ba:	a1 e0       	ldi	r26, 0x01	; 1
     7bc:	78 17       	cp	r23, r24
     7be:	08 f0       	brcs	.+2      	; 0x7c2 <__vector_6+0x10e>
     7c0:	a0 e0       	ldi	r26, 0x00	; 0
     7c2:	6a 2b       	or	r22, r26
     7c4:	87 2f       	mov	r24, r23
     7c6:	7f 2f       	mov	r23, r31
     7c8:	7b 0d       	add	r23, r11
     7ca:	51 e0       	ldi	r21, 0x01	; 1
     7cc:	7f 17       	cp	r23, r31
     7ce:	08 f0       	brcs	.+2      	; 0x7d2 <__vector_6+0x11e>
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	67 0f       	add	r22, r23
     7d4:	f1 e0       	ldi	r31, 0x01	; 1
     7d6:	67 17       	cp	r22, r23
     7d8:	08 f0       	brcs	.+2      	; 0x7dc <__vector_6+0x128>
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	5f 2b       	or	r21, r31
     7de:	dc 0c       	add	r13, r12
     7e0:	5d 0d       	add	r21, r13
     7e2:	e0 93 89 01 	sts	0x0189, r30
     7e6:	40 93 8a 01 	sts	0x018A, r20
     7ea:	30 93 8b 01 	sts	0x018B, r19
     7ee:	20 93 8c 01 	sts	0x018C, r18
     7f2:	90 93 8d 01 	sts	0x018D, r25
     7f6:	80 93 8e 01 	sts	0x018E, r24
     7fa:	60 93 8f 01 	sts	0x018F, r22
     7fe:	50 93 90 01 	sts	0x0190, r21

            // clip delta if greater then target
            if(ullRampingValue > ullRampingTargetValue)
     802:	e0 90 89 01 	lds	r14, 0x0189
     806:	70 91 8a 01 	lds	r23, 0x018A
     80a:	f0 91 8b 01 	lds	r31, 0x018B
     80e:	b0 91 8c 01 	lds	r27, 0x018C
     812:	00 91 8d 01 	lds	r16, 0x018D
     816:	50 91 8e 01 	lds	r21, 0x018E
     81a:	30 91 8f 01 	lds	r19, 0x018F
     81e:	90 91 90 01 	lds	r25, 0x0190
     822:	f0 90 96 01 	lds	r15, 0x0196
     826:	60 91 97 01 	lds	r22, 0x0197
     82a:	e0 91 98 01 	lds	r30, 0x0198
     82e:	a0 91 99 01 	lds	r26, 0x0199
     832:	10 91 9a 01 	lds	r17, 0x019A
     836:	40 91 9b 01 	lds	r20, 0x019B
     83a:	20 91 9c 01 	lds	r18, 0x019C
     83e:	80 91 9d 01 	lds	r24, 0x019D
     842:	89 17       	cp	r24, r25
     844:	e0 f0       	brcs	.+56     	; 0x87e <__vector_6+0x1ca>
     846:	98 17       	cp	r25, r24
     848:	d1 f5       	brne	.+116    	; 0x8be <__vector_6+0x20a>
     84a:	23 17       	cp	r18, r19
     84c:	c0 f0       	brcs	.+48     	; 0x87e <__vector_6+0x1ca>
     84e:	32 17       	cp	r19, r18
     850:	b1 f5       	brne	.+108    	; 0x8be <__vector_6+0x20a>
     852:	45 17       	cp	r20, r21
     854:	a0 f0       	brcs	.+40     	; 0x87e <__vector_6+0x1ca>
     856:	54 17       	cp	r21, r20
     858:	91 f5       	brne	.+100    	; 0x8be <__vector_6+0x20a>
     85a:	10 17       	cp	r17, r16
     85c:	80 f0       	brcs	.+32     	; 0x87e <__vector_6+0x1ca>
     85e:	01 17       	cp	r16, r17
     860:	71 f5       	brne	.+92     	; 0x8be <__vector_6+0x20a>
     862:	ab 17       	cp	r26, r27
     864:	60 f0       	brcs	.+24     	; 0x87e <__vector_6+0x1ca>
     866:	ba 17       	cp	r27, r26
     868:	51 f5       	brne	.+84     	; 0x8be <__vector_6+0x20a>
     86a:	ef 17       	cp	r30, r31
     86c:	40 f0       	brcs	.+16     	; 0x87e <__vector_6+0x1ca>
     86e:	fe 17       	cp	r31, r30
     870:	31 f5       	brne	.+76     	; 0x8be <__vector_6+0x20a>
     872:	67 17       	cp	r22, r23
     874:	20 f0       	brcs	.+8      	; 0x87e <__vector_6+0x1ca>
     876:	76 17       	cp	r23, r22
     878:	11 f5       	brne	.+68     	; 0x8be <__vector_6+0x20a>
     87a:	fe 14       	cp	r15, r14
     87c:	00 f5       	brcc	.+64     	; 0x8be <__vector_6+0x20a>
                ullRampingValue = ullRampingTargetValue;
     87e:	70 91 96 01 	lds	r23, 0x0196
     882:	60 91 97 01 	lds	r22, 0x0197
     886:	50 91 98 01 	lds	r21, 0x0198
     88a:	40 91 99 01 	lds	r20, 0x0199
     88e:	30 91 9a 01 	lds	r19, 0x019A
     892:	20 91 9b 01 	lds	r18, 0x019B
     896:	90 91 9c 01 	lds	r25, 0x019C
     89a:	80 91 9d 01 	lds	r24, 0x019D
     89e:	70 93 89 01 	sts	0x0189, r23
     8a2:	60 93 8a 01 	sts	0x018A, r22
     8a6:	50 93 8b 01 	sts	0x018B, r21
     8aa:	40 93 8c 01 	sts	0x018C, r20
     8ae:	30 93 8d 01 	sts	0x018D, r19
     8b2:	20 93 8e 01 	sts	0x018E, r18
     8b6:	90 93 8f 01 	sts	0x018F, r25
     8ba:	80 93 90 01 	sts	0x0190, r24

            // convert to DAC range
            OCR0B = (unsigned char)(ullRampingValue / RAMP_TIME_TICKS);
     8be:	20 91 89 01 	lds	r18, 0x0189
     8c2:	30 91 8a 01 	lds	r19, 0x018A
     8c6:	40 91 8b 01 	lds	r20, 0x018B
     8ca:	50 91 8c 01 	lds	r21, 0x018C
     8ce:	60 91 8d 01 	lds	r22, 0x018D
     8d2:	70 91 8e 01 	lds	r23, 0x018E
     8d6:	80 91 8f 01 	lds	r24, 0x018F
     8da:	90 91 90 01 	lds	r25, 0x0190
     8de:	aa 24       	eor	r10, r10
     8e0:	68 94       	set
     8e2:	a4 f8       	bld	r10, 4
     8e4:	0f 2e       	mov	r0, r31
     8e6:	f7 e2       	ldi	r31, 0x27	; 39
     8e8:	bf 2e       	mov	r11, r31
     8ea:	f0 2d       	mov	r31, r0
     8ec:	cc 24       	eor	r12, r12
     8ee:	dd 24       	eor	r13, r13
     8f0:	ee 24       	eor	r14, r14
     8f2:	ff 24       	eor	r15, r15
     8f4:	00 e0       	ldi	r16, 0x00	; 0
     8f6:	10 e0       	ldi	r17, 0x00	; 0
     8f8:	d4 d3       	rcall	.+1960   	; 0x10a2 <__udivdi3>
     8fa:	2c bf       	out	0x3c, r18	; 60
        }
    };
    
    if(eRampingState == eRampingDown)
     8fc:	80 91 7b 01 	lds	r24, 0x017B
     900:	83 30       	cpi	r24, 0x03	; 3
     902:	09 f0       	breq	.+2      	; 0x906 <__vector_6+0x252>
     904:	19 c1       	rjmp	.+562    	; 0xb38 <__vector_6+0x484>
    {
        if(OCR0B == 0)
     906:	8c b7       	in	r24, 0x3c	; 60
     908:	88 23       	and	r24, r24
     90a:	19 f4       	brne	.+6      	; 0x912 <__vector_6+0x25e>
        {
            eRampingState = eRampedDown;
     90c:	10 92 7b 01 	sts	0x017B, r1
     910:	13 c1       	rjmp	.+550    	; 0xb38 <__vector_6+0x484>
        }
        else
        {
            // add delta
            ullRampingValue = ullRampingValue - llIncrement;
     912:	60 91 89 01 	lds	r22, 0x0189
     916:	e0 90 8a 01 	lds	r14, 0x018A
     91a:	00 91 8b 01 	lds	r16, 0x018B
     91e:	10 91 8c 01 	lds	r17, 0x018C
     922:	b0 91 8d 01 	lds	r27, 0x018D
     926:	a0 91 8e 01 	lds	r26, 0x018E
     92a:	f0 91 8f 01 	lds	r31, 0x018F
     92e:	c0 90 90 01 	lds	r12, 0x0190
     932:	e0 91 7d 01 	lds	r30, 0x017D
     936:	40 91 7e 01 	lds	r20, 0x017E
     93a:	30 91 7f 01 	lds	r19, 0x017F
     93e:	20 91 80 01 	lds	r18, 0x0180
     942:	90 91 81 01 	lds	r25, 0x0181
     946:	80 91 82 01 	lds	r24, 0x0182
     94a:	b0 90 83 01 	lds	r11, 0x0183
     94e:	d0 90 84 01 	lds	r13, 0x0184
     952:	56 2f       	mov	r21, r22
     954:	5e 1b       	sub	r21, r30
     956:	e5 2f       	mov	r30, r21
     958:	51 e0       	ldi	r21, 0x01	; 1
     95a:	6e 17       	cp	r22, r30
     95c:	08 f0       	brcs	.+2      	; 0x960 <__vector_6+0x2ac>
     95e:	50 e0       	ldi	r21, 0x00	; 0
     960:	6e 2d       	mov	r22, r14
     962:	64 1b       	sub	r22, r20
     964:	46 2f       	mov	r20, r22
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	e4 16       	cp	r14, r20
     96a:	08 f0       	brcs	.+2      	; 0x96e <__vector_6+0x2ba>
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	f4 2e       	mov	r15, r20
     970:	f5 1a       	sub	r15, r21
     972:	51 e0       	ldi	r21, 0x01	; 1
     974:	4f 15       	cp	r20, r15
     976:	08 f0       	brcs	.+2      	; 0x97a <__vector_6+0x2c6>
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	65 2b       	or	r22, r21
     97c:	4f 2d       	mov	r20, r15
     97e:	50 2f       	mov	r21, r16
     980:	53 1b       	sub	r21, r19
     982:	35 2f       	mov	r19, r21
     984:	71 e0       	ldi	r23, 0x01	; 1
     986:	05 17       	cp	r16, r21
     988:	08 f0       	brcs	.+2      	; 0x98c <__vector_6+0x2d8>
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	53 2f       	mov	r21, r19
     98e:	56 1b       	sub	r21, r22
     990:	65 2f       	mov	r22, r21
     992:	51 e0       	ldi	r21, 0x01	; 1
     994:	36 17       	cp	r19, r22
     996:	08 f0       	brcs	.+2      	; 0x99a <__vector_6+0x2e6>
     998:	50 e0       	ldi	r21, 0x00	; 0
     99a:	75 2b       	or	r23, r21
     99c:	36 2f       	mov	r19, r22
     99e:	61 2f       	mov	r22, r17
     9a0:	62 1b       	sub	r22, r18
     9a2:	26 2f       	mov	r18, r22
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	12 17       	cp	r17, r18
     9a8:	08 f0       	brcs	.+2      	; 0x9ac <__vector_6+0x2f8>
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	52 2f       	mov	r21, r18
     9ae:	57 1b       	sub	r21, r23
     9b0:	75 2f       	mov	r23, r21
     9b2:	51 e0       	ldi	r21, 0x01	; 1
     9b4:	27 17       	cp	r18, r23
     9b6:	08 f0       	brcs	.+2      	; 0x9ba <__vector_6+0x306>
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	65 2b       	or	r22, r21
     9bc:	27 2f       	mov	r18, r23
     9be:	5b 2f       	mov	r21, r27
     9c0:	59 1b       	sub	r21, r25
     9c2:	95 2f       	mov	r25, r21
     9c4:	71 e0       	ldi	r23, 0x01	; 1
     9c6:	b5 17       	cp	r27, r21
     9c8:	08 f0       	brcs	.+2      	; 0x9cc <__vector_6+0x318>
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	59 2f       	mov	r21, r25
     9ce:	56 1b       	sub	r21, r22
     9d0:	65 2f       	mov	r22, r21
     9d2:	51 e0       	ldi	r21, 0x01	; 1
     9d4:	96 17       	cp	r25, r22
     9d6:	08 f0       	brcs	.+2      	; 0x9da <__vector_6+0x326>
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	75 2b       	or	r23, r21
     9dc:	96 2f       	mov	r25, r22
     9de:	6a 2f       	mov	r22, r26
     9e0:	68 1b       	sub	r22, r24
     9e2:	86 2f       	mov	r24, r22
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	a8 17       	cp	r26, r24
     9e8:	08 f0       	brcs	.+2      	; 0x9ec <__vector_6+0x338>
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	58 2f       	mov	r21, r24
     9ee:	57 1b       	sub	r21, r23
     9f0:	75 2f       	mov	r23, r21
     9f2:	a1 e0       	ldi	r26, 0x01	; 1
     9f4:	85 17       	cp	r24, r21
     9f6:	08 f0       	brcs	.+2      	; 0x9fa <__vector_6+0x346>
     9f8:	a0 e0       	ldi	r26, 0x00	; 0
     9fa:	6a 2b       	or	r22, r26
     9fc:	87 2f       	mov	r24, r23
     9fe:	7f 2f       	mov	r23, r31
     a00:	7b 19       	sub	r23, r11
     a02:	51 e0       	ldi	r21, 0x01	; 1
     a04:	f7 17       	cp	r31, r23
     a06:	08 f0       	brcs	.+2      	; 0xa0a <__vector_6+0x356>
     a08:	50 e0       	ldi	r21, 0x00	; 0
     a0a:	f7 2f       	mov	r31, r23
     a0c:	f6 1b       	sub	r31, r22
     a0e:	6f 2f       	mov	r22, r31
     a10:	f1 e0       	ldi	r31, 0x01	; 1
     a12:	76 17       	cp	r23, r22
     a14:	08 f0       	brcs	.+2      	; 0xa18 <__vector_6+0x364>
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	5f 2b       	or	r21, r31
     a1a:	cd 18       	sub	r12, r13
     a1c:	c5 1a       	sub	r12, r21
     a1e:	e0 93 89 01 	sts	0x0189, r30
     a22:	40 93 8a 01 	sts	0x018A, r20
     a26:	30 93 8b 01 	sts	0x018B, r19
     a2a:	20 93 8c 01 	sts	0x018C, r18
     a2e:	90 93 8d 01 	sts	0x018D, r25
     a32:	80 93 8e 01 	sts	0x018E, r24
     a36:	60 93 8f 01 	sts	0x018F, r22
     a3a:	c0 92 90 01 	sts	0x0190, r12

            // clip delta if greater then target
            if(ullRampingValue < ullRampingTargetValue)
     a3e:	f0 90 89 01 	lds	r15, 0x0189
     a42:	60 91 8a 01 	lds	r22, 0x018A
     a46:	e0 91 8b 01 	lds	r30, 0x018B
     a4a:	a0 91 8c 01 	lds	r26, 0x018C
     a4e:	10 91 8d 01 	lds	r17, 0x018D
     a52:	40 91 8e 01 	lds	r20, 0x018E
     a56:	20 91 8f 01 	lds	r18, 0x018F
     a5a:	80 91 90 01 	lds	r24, 0x0190
     a5e:	e0 90 96 01 	lds	r14, 0x0196
     a62:	70 91 97 01 	lds	r23, 0x0197
     a66:	f0 91 98 01 	lds	r31, 0x0198
     a6a:	b0 91 99 01 	lds	r27, 0x0199
     a6e:	00 91 9a 01 	lds	r16, 0x019A
     a72:	50 91 9b 01 	lds	r21, 0x019B
     a76:	30 91 9c 01 	lds	r19, 0x019C
     a7a:	90 91 9d 01 	lds	r25, 0x019D
     a7e:	89 17       	cp	r24, r25
     a80:	e0 f0       	brcs	.+56     	; 0xaba <__vector_6+0x406>
     a82:	98 17       	cp	r25, r24
     a84:	d1 f5       	brne	.+116    	; 0xafa <__vector_6+0x446>
     a86:	23 17       	cp	r18, r19
     a88:	c0 f0       	brcs	.+48     	; 0xaba <__vector_6+0x406>
     a8a:	32 17       	cp	r19, r18
     a8c:	b1 f5       	brne	.+108    	; 0xafa <__vector_6+0x446>
     a8e:	45 17       	cp	r20, r21
     a90:	a0 f0       	brcs	.+40     	; 0xaba <__vector_6+0x406>
     a92:	54 17       	cp	r21, r20
     a94:	91 f5       	brne	.+100    	; 0xafa <__vector_6+0x446>
     a96:	10 17       	cp	r17, r16
     a98:	80 f0       	brcs	.+32     	; 0xaba <__vector_6+0x406>
     a9a:	01 17       	cp	r16, r17
     a9c:	71 f5       	brne	.+92     	; 0xafa <__vector_6+0x446>
     a9e:	ab 17       	cp	r26, r27
     aa0:	60 f0       	brcs	.+24     	; 0xaba <__vector_6+0x406>
     aa2:	ba 17       	cp	r27, r26
     aa4:	51 f5       	brne	.+84     	; 0xafa <__vector_6+0x446>
     aa6:	ef 17       	cp	r30, r31
     aa8:	40 f0       	brcs	.+16     	; 0xaba <__vector_6+0x406>
     aaa:	fe 17       	cp	r31, r30
     aac:	31 f5       	brne	.+76     	; 0xafa <__vector_6+0x446>
     aae:	67 17       	cp	r22, r23
     ab0:	20 f0       	brcs	.+8      	; 0xaba <__vector_6+0x406>
     ab2:	76 17       	cp	r23, r22
     ab4:	11 f5       	brne	.+68     	; 0xafa <__vector_6+0x446>
     ab6:	fe 14       	cp	r15, r14
     ab8:	00 f5       	brcc	.+64     	; 0xafa <__vector_6+0x446>
                ullRampingValue = ullRampingTargetValue;
     aba:	70 91 96 01 	lds	r23, 0x0196
     abe:	60 91 97 01 	lds	r22, 0x0197
     ac2:	50 91 98 01 	lds	r21, 0x0198
     ac6:	40 91 99 01 	lds	r20, 0x0199
     aca:	30 91 9a 01 	lds	r19, 0x019A
     ace:	20 91 9b 01 	lds	r18, 0x019B
     ad2:	90 91 9c 01 	lds	r25, 0x019C
     ad6:	80 91 9d 01 	lds	r24, 0x019D
     ada:	70 93 89 01 	sts	0x0189, r23
     ade:	60 93 8a 01 	sts	0x018A, r22
     ae2:	50 93 8b 01 	sts	0x018B, r21
     ae6:	40 93 8c 01 	sts	0x018C, r20
     aea:	30 93 8d 01 	sts	0x018D, r19
     aee:	20 93 8e 01 	sts	0x018E, r18
     af2:	90 93 8f 01 	sts	0x018F, r25
     af6:	80 93 90 01 	sts	0x0190, r24

            // convert to DAC range
            OCR0B = (unsigned char)(ullRampingValue / RAMP_TIME_TICKS);
     afa:	20 91 89 01 	lds	r18, 0x0189
     afe:	30 91 8a 01 	lds	r19, 0x018A
     b02:	40 91 8b 01 	lds	r20, 0x018B
     b06:	50 91 8c 01 	lds	r21, 0x018C
     b0a:	60 91 8d 01 	lds	r22, 0x018D
     b0e:	70 91 8e 01 	lds	r23, 0x018E
     b12:	80 91 8f 01 	lds	r24, 0x018F
     b16:	90 91 90 01 	lds	r25, 0x0190
     b1a:	aa 24       	eor	r10, r10
     b1c:	68 94       	set
     b1e:	a4 f8       	bld	r10, 4
     b20:	0f 2e       	mov	r0, r31
     b22:	f7 e2       	ldi	r31, 0x27	; 39
     b24:	bf 2e       	mov	r11, r31
     b26:	f0 2d       	mov	r31, r0
     b28:	cc 24       	eor	r12, r12
     b2a:	dd 24       	eor	r13, r13
     b2c:	ee 24       	eor	r14, r14
     b2e:	ff 24       	eor	r15, r15
     b30:	00 e0       	ldi	r16, 0x00	; 0
     b32:	10 e0       	ldi	r17, 0x00	; 0
     b34:	b6 d2       	rcall	.+1388   	; 0x10a2 <__udivdi3>
     b36:	2c bf       	out	0x3c, r18	; 60
        };        
    };

    // in ramped up state we have direct control via the potentiometer
    if(eRampingState == eRampedUp)
     b38:	80 91 7b 01 	lds	r24, 0x017B
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	19 f4       	brne	.+6      	; 0xb46 <__vector_6+0x492>
        OCR0B = ucADCMeanValue;
     b40:	80 91 87 01 	lds	r24, 0x0187
     b44:	8c bf       	out	0x3c, r24	; 60

    // read in error pins from SWM controller
    // we need only the lower 3 bits
    ucErrorCode = PINB & 0x07; 
     b46:	86 b3       	in	r24, 0x16	; 22
     b48:	87 70       	andi	r24, 0x07	; 7
     b4a:	80 93 9e 01 	sts	0x019E, r24
        
    // ==== CPU LED blink code below ====
    if(!(uiBlinkDelay--))
     b4e:	80 91 62 00 	lds	r24, 0x0062
     b52:	90 91 63 00 	lds	r25, 0x0063
     b56:	9c 01       	movw	r18, r24
     b58:	21 50       	subi	r18, 0x01	; 1
     b5a:	30 40       	sbci	r19, 0x00	; 0
     b5c:	30 93 63 00 	sts	0x0063, r19
     b60:	20 93 62 00 	sts	0x0062, r18
     b64:	00 97       	sbiw	r24, 0x00	; 0
     b66:	61 f4       	brne	.+24     	; 0xb80 <__vector_6+0x4cc>
    {
        PORT_LED_CPU = PORT_LED_CPU ^ _BV(BIT_LED_CPU);
     b68:	eb e3       	ldi	r30, 0x3B	; 59
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	90 81       	ld	r25, Z
     b6e:	80 e1       	ldi	r24, 0x10	; 16
     b70:	89 27       	eor	r24, r25
     b72:	80 83       	st	Z, r24
        uiBlinkDelay = 500;
     b74:	84 ef       	ldi	r24, 0xF4	; 244
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	90 93 63 00 	sts	0x0063, r25
     b7c:	80 93 62 00 	sts	0x0062, r24
    // ==========================
    // ==== morse code below ====
    // ==========================

    // LED long off to "sync user"
    if(eMorseState == eMorsePause)
     b80:	80 91 85 01 	lds	r24, 0x0185
     b84:	88 23       	and	r24, r24
     b86:	f1 f4       	brne	.+60     	; 0xbc4 <__vector_6+0x510>
    {
        PORT_LED_STAT = PORT_LED_STAT | _BV(BIT_LED_STAT);          // switch off LED (active low)
     b88:	eb e3       	ldi	r30, 0x3B	; 59
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	80 62       	ori	r24, 0x20	; 32
     b90:	80 83       	st	Z, r24
        PORT_LED_EXSTAT = PORT_LED_EXSTAT & ~(_BV(BIT_LED_EXSTAT)); // ext. stat off 
     b92:	80 81       	ld	r24, Z
     b94:	87 7f       	andi	r24, 0xF7	; 247
     b96:	80 83       	st	Z, r24

        // check if delay has expired
        if(!(uiMorseDelay--))
     b98:	80 91 60 00 	lds	r24, 0x0060
     b9c:	90 91 61 00 	lds	r25, 0x0061
     ba0:	9c 01       	movw	r18, r24
     ba2:	21 50       	subi	r18, 0x01	; 1
     ba4:	30 40       	sbci	r19, 0x00	; 0
     ba6:	30 93 61 00 	sts	0x0061, r19
     baa:	20 93 60 00 	sts	0x0060, r18
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	49 f4       	brne	.+18     	; 0xbc4 <__vector_6+0x510>
        {
            uiMorseDelay = MORSE_LONG_BIT;
     bb2:	8c e2       	ldi	r24, 0x2C	; 44
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	90 93 61 00 	sts	0x0061, r25
     bba:	80 93 60 00 	sts	0x0060, r24
            eMorseState = eMorseStart;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	80 93 85 01 	sts	0x0185, r24
        };
    };

    // start bit (longer than the morse code)
    if(eMorseState == eMorseStart)
     bc4:	80 91 85 01 	lds	r24, 0x0185
     bc8:	81 30       	cpi	r24, 0x01	; 1
     bca:	11 f5       	brne	.+68     	; 0xc10 <__vector_6+0x55c>
    {
        // switch on LEDs
        PORT_LED_STAT = PORT_LED_STAT & ~(_BV(BIT_LED_STAT));   // switch on LED (active low)
     bcc:	eb e3       	ldi	r30, 0x3B	; 59
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	8f 7d       	andi	r24, 0xDF	; 223
     bd4:	80 83       	st	Z, r24
        PORT_LED_EXSTAT = PORT_LED_EXSTAT | _BV(BIT_LED_EXSTAT);// ext. stat on 
     bd6:	80 81       	ld	r24, Z
     bd8:	88 60       	ori	r24, 0x08	; 8
     bda:	80 83       	st	Z, r24

        // check if delay has expired
        if(!(uiMorseDelay--))
     bdc:	80 91 60 00 	lds	r24, 0x0060
     be0:	90 91 61 00 	lds	r25, 0x0061
     be4:	9c 01       	movw	r18, r24
     be6:	21 50       	subi	r18, 0x01	; 1
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	30 93 61 00 	sts	0x0061, r19
     bee:	20 93 60 00 	sts	0x0060, r18
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f4       	brne	.+26     	; 0xc10 <__vector_6+0x55c>
        {
            uiMorseDelay = MORSE_SYNC_PAUSE;// load delay counter
     bf6:	88 ee       	ldi	r24, 0xE8	; 232
     bf8:	93 e0       	ldi	r25, 0x03	; 3
     bfa:	90 93 61 00 	sts	0x0061, r25
     bfe:	80 93 60 00 	sts	0x0060, r24
            eMorseState = eMorseDelay;      // next state
     c02:	82 e0       	ldi	r24, 0x02	; 2
     c04:	80 93 85 01 	sts	0x0185, r24
            ucCode = ucErrorCode;           // prepare static error counter for countdown
     c08:	80 91 9e 01 	lds	r24, 0x019E
     c0c:	80 93 64 01 	sts	0x0164, r24
        };
    };

    if(eMorseState == eMorseDelay)
     c10:	80 91 85 01 	lds	r24, 0x0185
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	11 f5       	brne	.+68     	; 0xc5c <__vector_6+0x5a8>
    {
        // LEDs off
        PORT_LED_STAT = PORT_LED_STAT | _BV(BIT_LED_STAT);          // switch off LED (active low)
     c18:	eb e3       	ldi	r30, 0x3B	; 59
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	80 62       	ori	r24, 0x20	; 32
     c20:	80 83       	st	Z, r24
        PORT_LED_EXSTAT = PORT_LED_EXSTAT & ~(_BV(BIT_LED_EXSTAT)); // ext. stat off 
     c22:	80 81       	ld	r24, Z
     c24:	87 7f       	andi	r24, 0xF7	; 247
     c26:	80 83       	st	Z, r24

        // check if delay has expired
        if(!(uiMorseDelay--))
     c28:	80 91 60 00 	lds	r24, 0x0060
     c2c:	90 91 61 00 	lds	r25, 0x0061
     c30:	9c 01       	movw	r18, r24
     c32:	21 50       	subi	r18, 0x01	; 1
     c34:	30 40       	sbci	r19, 0x00	; 0
     c36:	30 93 61 00 	sts	0x0061, r19
     c3a:	20 93 60 00 	sts	0x0060, r18
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	69 f4       	brne	.+26     	; 0xc5c <__vector_6+0x5a8>
        {
            uiMorseDelay = MORSE_SHORT_BIT;     // load delay counter
     c42:	84 e6       	ldi	r24, 0x64	; 100
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	90 93 61 00 	sts	0x0061, r25
     c4a:	80 93 60 00 	sts	0x0060, r24
            eMorseState = eMorseCodeOutputOn;   // next state
     c4e:	83 e0       	ldi	r24, 0x03	; 3
     c50:	80 93 85 01 	sts	0x0185, r24
            ucCode = ucErrorCode;               // prepare static error counter for countdown
     c54:	80 91 9e 01 	lds	r24, 0x019E
     c58:	80 93 64 01 	sts	0x0164, r24
        };
    };

    if((eMorseState == eMorseCodeOutputOn) || (eMorseState == eMorseCodeOutputOff))
     c5c:	80 91 85 01 	lds	r24, 0x0185
     c60:	83 30       	cpi	r24, 0x03	; 3
     c62:	29 f0       	breq	.+10     	; 0xc6e <__vector_6+0x5ba>
     c64:	80 91 85 01 	lds	r24, 0x0185
     c68:	84 30       	cpi	r24, 0x04	; 4
     c6a:	09 f0       	breq	.+2      	; 0xc6e <__vector_6+0x5ba>
     c6c:	57 c0       	rjmp	.+174    	; 0xd1c <__vector_6+0x668>
    {
        // check if error code is != 0
        if(ucCode)
     c6e:	80 91 64 01 	lds	r24, 0x0164
     c72:	88 23       	and	r24, r24
     c74:	09 f4       	brne	.+2      	; 0xc78 <__vector_6+0x5c4>
     c76:	4a c0       	rjmp	.+148    	; 0xd0c <__vector_6+0x658>
        {
            // check if we are in the "ON" Phase of morse
            if(eMorseState == eMorseCodeOutputOn)
     c78:	90 91 85 01 	lds	r25, 0x0185
     c7c:	93 30       	cpi	r25, 0x03	; 3
     c7e:	f9 f4       	brne	.+62     	; 0xcbe <__vector_6+0x60a>
            {
                // switch on LEDs
                PORT_LED_STAT = PORT_LED_STAT & ~(_BV(BIT_LED_STAT));   // switch on LED (active low)
     c80:	eb e3       	ldi	r30, 0x3B	; 59
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	90 81       	ld	r25, Z
     c86:	9f 7d       	andi	r25, 0xDF	; 223
     c88:	90 83       	st	Z, r25
                PORT_LED_EXSTAT = PORT_LED_EXSTAT | _BV(BIT_LED_EXSTAT);// ext. stat on 
     c8a:	90 81       	ld	r25, Z
     c8c:	98 60       	ori	r25, 0x08	; 8
     c8e:	90 83       	st	Z, r25
        
                // check if delay has expired
                if(!(uiMorseDelay--))
     c90:	20 91 60 00 	lds	r18, 0x0060
     c94:	30 91 61 00 	lds	r19, 0x0061
     c98:	a9 01       	movw	r20, r18
     c9a:	41 50       	subi	r20, 0x01	; 1
     c9c:	50 40       	sbci	r21, 0x00	; 0
     c9e:	50 93 61 00 	sts	0x0061, r21
     ca2:	40 93 60 00 	sts	0x0060, r20
     ca6:	21 15       	cp	r18, r1
     ca8:	31 05       	cpc	r19, r1
     caa:	49 f4       	brne	.+18     	; 0xcbe <__vector_6+0x60a>
                {
                    uiMorseDelay = MORSE_BIT_PAUSE;
     cac:	24 ef       	ldi	r18, 0xF4	; 244
     cae:	31 e0       	ldi	r19, 0x01	; 1
     cb0:	30 93 61 00 	sts	0x0061, r19
     cb4:	20 93 60 00 	sts	0x0060, r18
                    eMorseState = eMorseCodeOutputOff;
     cb8:	94 e0       	ldi	r25, 0x04	; 4
     cba:	90 93 85 01 	sts	0x0185, r25
                };
            };
            
            // check if we are in the "OFF" phase of morse
            if(eMorseState == eMorseCodeOutputOff)
     cbe:	90 91 85 01 	lds	r25, 0x0185
     cc2:	94 30       	cpi	r25, 0x04	; 4
     cc4:	59 f5       	brne	.+86     	; 0xd1c <__vector_6+0x668>
            {
                // switch off LEDs
                PORT_LED_STAT = PORT_LED_STAT | _BV(BIT_LED_STAT);          // switch off LED (active low)
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	90 81       	ld	r25, Z
     ccc:	90 62       	ori	r25, 0x20	; 32
     cce:	90 83       	st	Z, r25
                PORT_LED_EXSTAT = PORT_LED_EXSTAT & ~(_BV(BIT_LED_EXSTAT)); // ext. stat off 
     cd0:	90 81       	ld	r25, Z
     cd2:	97 7f       	andi	r25, 0xF7	; 247
     cd4:	90 83       	st	Z, r25
        
                // check if delay has expired
                if(!(uiMorseDelay--))
     cd6:	20 91 60 00 	lds	r18, 0x0060
     cda:	30 91 61 00 	lds	r19, 0x0061
     cde:	a9 01       	movw	r20, r18
     ce0:	41 50       	subi	r20, 0x01	; 1
     ce2:	50 40       	sbci	r21, 0x00	; 0
     ce4:	50 93 61 00 	sts	0x0061, r21
     ce8:	40 93 60 00 	sts	0x0060, r20
     cec:	21 15       	cp	r18, r1
     cee:	31 05       	cpc	r19, r1
     cf0:	a9 f4       	brne	.+42     	; 0xd1c <__vector_6+0x668>
                {
                    uiMorseDelay = MORSE_SHORT_BIT;
     cf2:	24 e6       	ldi	r18, 0x64	; 100
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	30 93 61 00 	sts	0x0061, r19
     cfa:	20 93 60 00 	sts	0x0060, r18
                    eMorseState = eMorseCodeOutputOn;
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	90 93 85 01 	sts	0x0185, r25
                    ucCode--;
     d04:	81 50       	subi	r24, 0x01	; 1
     d06:	80 93 64 01 	sts	0x0164, r24
     d0a:	08 c0       	rjmp	.+16     	; 0xd1c <__vector_6+0x668>
                };
            };
        }
        else
        {
                uiMorseDelay = MORSE_SYNC_PAUSE;
     d0c:	88 ee       	ldi	r24, 0xE8	; 232
     d0e:	93 e0       	ldi	r25, 0x03	; 3
     d10:	90 93 61 00 	sts	0x0061, r25
     d14:	80 93 60 00 	sts	0x0060, r24
                eMorseState = eMorsePause;
     d18:	10 92 85 01 	sts	0x0185, r1
        };
    };
    DebounceKeys();
     d1c:	5c da       	rcall	.-2888   	; 0x1d6 <DebounceKeys>
}
     d1e:	ff 91       	pop	r31
     d20:	ef 91       	pop	r30
     d22:	bf 91       	pop	r27
     d24:	af 91       	pop	r26
     d26:	9f 91       	pop	r25
     d28:	8f 91       	pop	r24
     d2a:	7f 91       	pop	r23
     d2c:	6f 91       	pop	r22
     d2e:	5f 91       	pop	r21
     d30:	4f 91       	pop	r20
     d32:	3f 91       	pop	r19
     d34:	2f 91       	pop	r18
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
     d42:	bf 90       	pop	r11
     d44:	af 90       	pop	r10
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	0f 90       	pop	r0
     d4c:	1f 90       	pop	r1
     d4e:	18 95       	reti

00000d50 <main>:
volatile eMorseStateType eMorseState;

// main loop

int main()
{
     d50:	af 92       	push	r10
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
    InitHardware();
     d60:	99 d9       	rcall	.-3278   	; 0x94 <InitHardware>
    InitTimer1CompareAInt();
     d62:	ca d9       	rcall	.-3180   	; 0xf8 <InitTimer1CompareAInt>

    eRampingState = eRampedDown;
     d64:	10 92 7b 01 	sts	0x017B, r1
    eMorseState = eMorsePause;
     d68:	10 92 85 01 	sts	0x0185, r1

    OCR0B = 0;
     d6c:	1c be       	out	0x3c, r1	; 60
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
     d6e:	8f e4       	ldi	r24, 0x4F	; 79
     d70:	93 ec       	ldi	r25, 0xC3	; 195
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <main+0x22>
     d76:	00 c0       	rjmp	.+0      	; 0xd78 <main+0x28>
     d78:	00 00       	nop

    // wait 10ms to get a stable mean ADC
    _delay_ms(10.0);

    // set parameters
    ucCurrentSpeed = 0;
     d7a:	10 92 88 01 	sts	0x0188, r1
    ucTargetSpeed = ucADCMeanValue;
     d7e:	80 91 87 01 	lds	r24, 0x0187
     d82:	80 93 86 01 	sts	0x0186, r24

    ullRampingTargetValue = RAMP_TIME_TICKS * (unsigned long long)ucTargetSpeed;
     d86:	a0 90 86 01 	lds	r10, 0x0186
     d8a:	bb 24       	eor	r11, r11
     d8c:	cc 24       	eor	r12, r12
     d8e:	dd 24       	eor	r13, r13
     d90:	ee 24       	eor	r14, r14
     d92:	ff 24       	eor	r15, r15
     d94:	87 01       	movw	r16, r14
     d96:	2a 2d       	mov	r18, r10
     d98:	3b 2d       	mov	r19, r11
     d9a:	4c 2d       	mov	r20, r12
     d9c:	5d 2d       	mov	r21, r13
     d9e:	6e 2d       	mov	r22, r14
     da0:	7f 2d       	mov	r23, r15
     da2:	80 2f       	mov	r24, r16
     da4:	91 2f       	mov	r25, r17
     da6:	aa 24       	eor	r10, r10
     da8:	68 94       	set
     daa:	a4 f8       	bld	r10, 4
     dac:	0f 2e       	mov	r0, r31
     dae:	f7 e2       	ldi	r31, 0x27	; 39
     db0:	bf 2e       	mov	r11, r31
     db2:	f0 2d       	mov	r31, r0
     db4:	cc 24       	eor	r12, r12
     db6:	dd 24       	eor	r13, r13
     db8:	ee 24       	eor	r14, r14
     dba:	ff 24       	eor	r15, r15
     dbc:	00 e0       	ldi	r16, 0x00	; 0
     dbe:	10 e0       	ldi	r17, 0x00	; 0
     dc0:	78 d0       	rcall	.+240    	; 0xeb2 <__muldi3>
     dc2:	20 93 96 01 	sts	0x0196, r18
     dc6:	30 93 97 01 	sts	0x0197, r19
     dca:	40 93 98 01 	sts	0x0198, r20
     dce:	50 93 99 01 	sts	0x0199, r21
     dd2:	60 93 9a 01 	sts	0x019A, r22
     dd6:	70 93 9b 01 	sts	0x019B, r23
     dda:	80 93 9c 01 	sts	0x019C, r24
     dde:	90 93 9d 01 	sts	0x019D, r25
    ullRampingValue = RAMP_TIME_TICKS * (unsigned long long)ucCurrentSpeed;
     de2:	a0 90 88 01 	lds	r10, 0x0188
     de6:	bb 24       	eor	r11, r11
     de8:	cc 24       	eor	r12, r12
     dea:	dd 24       	eor	r13, r13
     dec:	ee 24       	eor	r14, r14
     dee:	ff 24       	eor	r15, r15
     df0:	87 01       	movw	r16, r14
     df2:	2a 2d       	mov	r18, r10
     df4:	3b 2d       	mov	r19, r11
     df6:	4c 2d       	mov	r20, r12
     df8:	5d 2d       	mov	r21, r13
     dfa:	6e 2d       	mov	r22, r14
     dfc:	7f 2d       	mov	r23, r15
     dfe:	80 2f       	mov	r24, r16
     e00:	91 2f       	mov	r25, r17
     e02:	aa 24       	eor	r10, r10
     e04:	68 94       	set
     e06:	a4 f8       	bld	r10, 4
     e08:	0f 2e       	mov	r0, r31
     e0a:	f7 e2       	ldi	r31, 0x27	; 39
     e0c:	bf 2e       	mov	r11, r31
     e0e:	f0 2d       	mov	r31, r0
     e10:	cc 24       	eor	r12, r12
     e12:	dd 24       	eor	r13, r13
     e14:	ee 24       	eor	r14, r14
     e16:	ff 24       	eor	r15, r15
     e18:	00 e0       	ldi	r16, 0x00	; 0
     e1a:	10 e0       	ldi	r17, 0x00	; 0
     e1c:	4a d0       	rcall	.+148    	; 0xeb2 <__muldi3>
     e1e:	20 93 89 01 	sts	0x0189, r18
     e22:	30 93 8a 01 	sts	0x018A, r19
     e26:	40 93 8b 01 	sts	0x018B, r20
     e2a:	50 93 8c 01 	sts	0x018C, r21
     e2e:	60 93 8d 01 	sts	0x018D, r22
     e32:	70 93 8e 01 	sts	0x018E, r23
     e36:	80 93 8f 01 	sts	0x018F, r24
     e3a:	90 93 90 01 	sts	0x0190, r25

    llIncrement = (long long)(ucTargetSpeed-ucCurrentSpeed);
     e3e:	20 91 86 01 	lds	r18, 0x0186
     e42:	80 91 88 01 	lds	r24, 0x0188
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	28 1b       	sub	r18, r24
     e4a:	31 09       	sbc	r19, r1
     e4c:	c9 01       	movw	r24, r18
     e4e:	99 0f       	add	r25, r25
     e50:	88 0b       	sbc	r24, r24
     e52:	98 2f       	mov	r25, r24
     e54:	20 93 7d 01 	sts	0x017D, r18
     e58:	30 93 7e 01 	sts	0x017E, r19
     e5c:	80 93 7f 01 	sts	0x017F, r24
     e60:	80 93 80 01 	sts	0x0180, r24
     e64:	80 93 81 01 	sts	0x0181, r24
     e68:	80 93 82 01 	sts	0x0182, r24
     e6c:	80 93 83 01 	sts	0x0183, r24
     e70:	80 93 84 01 	sts	0x0184, r24
    {
        // check states

        // if we are in ramped down state, master enable is off
        if(eRampingState == eRampedDown)
            PORT_SWM_EN = PORT_SWM_EN | _BV(BIT_SWM_EN);
     e74:	eb e3       	ldi	r30, 0x3B	; 59
     e76:	f0 e0       	ldi	r31, 0x00	; 0
    while(1)
    {
        // check states

        // if we are in ramped down state, master enable is off
        if(eRampingState == eRampedDown)
     e78:	80 91 7b 01 	lds	r24, 0x017B
     e7c:	88 23       	and	r24, r24
     e7e:	19 f4       	brne	.+6      	; 0xe86 <main+0x136>
            PORT_SWM_EN = PORT_SWM_EN | _BV(BIT_SWM_EN);
     e80:	80 81       	ld	r24, Z
     e82:	84 60       	ori	r24, 0x04	; 4
     e84:	80 83       	st	Z, r24

        // if we are ramping up, it would be wise to have the SWM enabled...
        // SWM is low active
        if(eRampingState == eRampingUp)
     e86:	80 91 7b 01 	lds	r24, 0x017B
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	19 f4       	brne	.+6      	; 0xe94 <main+0x144>
            PORT_SWM_EN = PORT_SWM_EN & ~(_BV(BIT_SWM_EN));
     e8e:	80 81       	ld	r24, Z
     e90:	8b 7f       	andi	r24, 0xFB	; 251
     e92:	80 83       	st	Z, r24

        // we are running at desired speed, let SWM enable active
        if(eRampingState == eRampedUp)
     e94:	80 91 7b 01 	lds	r24, 0x017B
     e98:	82 30       	cpi	r24, 0x02	; 2
     e9a:	19 f4       	brne	.+6      	; 0xea2 <main+0x152>
            PORT_SWM_EN = PORT_SWM_EN & ~(_BV(BIT_SWM_EN));
     e9c:	80 81       	ld	r24, Z
     e9e:	8b 7f       	andi	r24, 0xFB	; 251
     ea0:	80 83       	st	Z, r24

        // we are ramping down, external enable is already off,
        // but we have to keep SWM enable active till full stop of motor
        if(eRampingState == eRampingDown)
     ea2:	80 91 7b 01 	lds	r24, 0x017B
     ea6:	83 30       	cpi	r24, 0x03	; 3
     ea8:	39 f7       	brne	.-50     	; 0xe78 <main+0x128>
            PORT_SWM_EN = PORT_SWM_EN & ~(_BV(BIT_SWM_EN));
     eaa:	80 81       	ld	r24, Z
     eac:	8b 7f       	andi	r24, 0xFB	; 251
     eae:	80 83       	st	Z, r24
     eb0:	e3 cf       	rjmp	.-58     	; 0xe78 <main+0x128>

00000eb2 <__muldi3>:
     eb2:	a0 e3       	ldi	r26, 0x30	; 48
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ee e5       	ldi	r30, 0x5E	; 94
     eb8:	f7 e0       	ldi	r31, 0x07	; 7
     eba:	d0 c7       	rjmp	.+4000   	; 0x1e5c <__prologue_saves__>
     ebc:	e8 e0       	ldi	r30, 0x08	; 8
     ebe:	4e 01       	movw	r8, r28
     ec0:	08 94       	sec
     ec2:	81 1c       	adc	r8, r1
     ec4:	91 1c       	adc	r9, r1
     ec6:	d4 01       	movw	r26, r8
     ec8:	fe 2f       	mov	r31, r30
     eca:	1d 92       	st	X+, r1
     ecc:	fa 95       	dec	r31
     ece:	e9 f7       	brne	.-6      	; 0xeca <__muldi3+0x18>
     ed0:	29 83       	std	Y+1, r18	; 0x01
     ed2:	3a 83       	std	Y+2, r19	; 0x02
     ed4:	4b 83       	std	Y+3, r20	; 0x03
     ed6:	5c 83       	std	Y+4, r21	; 0x04
     ed8:	6d 83       	std	Y+5, r22	; 0x05
     eda:	7e 83       	std	Y+6, r23	; 0x06
     edc:	8f 83       	std	Y+7, r24	; 0x07
     ede:	98 87       	std	Y+8, r25	; 0x08
     ee0:	ce 01       	movw	r24, r28
     ee2:	09 96       	adiw	r24, 0x09	; 9
     ee4:	dc 01       	movw	r26, r24
     ee6:	1d 92       	st	X+, r1
     ee8:	ea 95       	dec	r30
     eea:	e9 f7       	brne	.-6      	; 0xee6 <__muldi3+0x34>
     eec:	a9 86       	std	Y+9, r10	; 0x09
     eee:	ba 86       	std	Y+10, r11	; 0x0a
     ef0:	cb 86       	std	Y+11, r12	; 0x0b
     ef2:	dc 86       	std	Y+12, r13	; 0x0c
     ef4:	ed 86       	std	Y+13, r14	; 0x0d
     ef6:	fe 86       	std	Y+14, r15	; 0x0e
     ef8:	0f 87       	std	Y+15, r16	; 0x0f
     efa:	18 8b       	std	Y+16, r17	; 0x10
     efc:	e9 80       	ldd	r14, Y+1	; 0x01
     efe:	fa 80       	ldd	r15, Y+2	; 0x02
     f00:	0b 81       	ldd	r16, Y+3	; 0x03
     f02:	1c 81       	ldd	r17, Y+4	; 0x04
     f04:	bf ef       	ldi	r27, 0xFF	; 255
     f06:	6b 2e       	mov	r6, r27
     f08:	bf ef       	ldi	r27, 0xFF	; 255
     f0a:	7b 2e       	mov	r7, r27
     f0c:	81 2c       	mov	r8, r1
     f0e:	91 2c       	mov	r9, r1
     f10:	6e 20       	and	r6, r14
     f12:	7f 20       	and	r7, r15
     f14:	80 22       	and	r8, r16
     f16:	91 22       	and	r9, r17
     f18:	18 01       	movw	r2, r16
     f1a:	44 24       	eor	r4, r4
     f1c:	55 24       	eor	r5, r5
     f1e:	2d a6       	std	Y+45, r2	; 0x2d
     f20:	3e a6       	std	Y+46, r3	; 0x2e
     f22:	4f a6       	std	Y+47, r4	; 0x2f
     f24:	58 aa       	std	Y+48, r5	; 0x30
     f26:	a9 84       	ldd	r10, Y+9	; 0x09
     f28:	ba 84       	ldd	r11, Y+10	; 0x0a
     f2a:	cb 84       	ldd	r12, Y+11	; 0x0b
     f2c:	dc 84       	ldd	r13, Y+12	; 0x0c
     f2e:	ff ef       	ldi	r31, 0xFF	; 255
     f30:	2f 2e       	mov	r2, r31
     f32:	ff ef       	ldi	r31, 0xFF	; 255
     f34:	3f 2e       	mov	r3, r31
     f36:	41 2c       	mov	r4, r1
     f38:	51 2c       	mov	r5, r1
     f3a:	2a 20       	and	r2, r10
     f3c:	3b 20       	and	r3, r11
     f3e:	4c 20       	and	r4, r12
     f40:	5d 20       	and	r5, r13
     f42:	96 01       	movw	r18, r12
     f44:	44 27       	eor	r20, r20
     f46:	55 27       	eor	r21, r21
     f48:	29 a7       	std	Y+41, r18	; 0x29
     f4a:	3a a7       	std	Y+42, r19	; 0x2a
     f4c:	4b a7       	std	Y+43, r20	; 0x2b
     f4e:	5c a7       	std	Y+44, r21	; 0x2c
     f50:	c2 01       	movw	r24, r4
     f52:	b1 01       	movw	r22, r2
     f54:	a4 01       	movw	r20, r8
     f56:	93 01       	movw	r18, r6
     f58:	46 d7       	rcall	.+3724   	; 0x1de6 <__mulsi3>
     f5a:	6d a3       	std	Y+37, r22	; 0x25
     f5c:	7e a3       	std	Y+38, r23	; 0x26
     f5e:	8f a3       	std	Y+39, r24	; 0x27
     f60:	98 a7       	std	Y+40, r25	; 0x28
     f62:	69 a5       	ldd	r22, Y+41	; 0x29
     f64:	7a a5       	ldd	r23, Y+42	; 0x2a
     f66:	8b a5       	ldd	r24, Y+43	; 0x2b
     f68:	9c a5       	ldd	r25, Y+44	; 0x2c
     f6a:	a4 01       	movw	r20, r8
     f6c:	93 01       	movw	r18, r6
     f6e:	3b d7       	rcall	.+3702   	; 0x1de6 <__mulsi3>
     f70:	69 a3       	std	Y+33, r22	; 0x21
     f72:	7a a3       	std	Y+34, r23	; 0x22
     f74:	8b a3       	std	Y+35, r24	; 0x23
     f76:	9c a3       	std	Y+36, r25	; 0x24
     f78:	c2 01       	movw	r24, r4
     f7a:	b1 01       	movw	r22, r2
     f7c:	2d a5       	ldd	r18, Y+45	; 0x2d
     f7e:	3e a5       	ldd	r19, Y+46	; 0x2e
     f80:	4f a5       	ldd	r20, Y+47	; 0x2f
     f82:	58 a9       	ldd	r21, Y+48	; 0x30
     f84:	30 d7       	rcall	.+3680   	; 0x1de6 <__mulsi3>
     f86:	3b 01       	movw	r6, r22
     f88:	4c 01       	movw	r8, r24
     f8a:	69 a5       	ldd	r22, Y+41	; 0x29
     f8c:	7a a5       	ldd	r23, Y+42	; 0x2a
     f8e:	8b a5       	ldd	r24, Y+43	; 0x2b
     f90:	9c a5       	ldd	r25, Y+44	; 0x2c
     f92:	2d a5       	ldd	r18, Y+45	; 0x2d
     f94:	3e a5       	ldd	r19, Y+46	; 0x2e
     f96:	4f a5       	ldd	r20, Y+47	; 0x2f
     f98:	58 a9       	ldd	r21, Y+48	; 0x30
     f9a:	25 d7       	rcall	.+3658   	; 0x1de6 <__mulsi3>
     f9c:	47 2f       	mov	r20, r23
     f9e:	38 2f       	mov	r19, r24
     fa0:	29 2f       	mov	r18, r25
     fa2:	86 2f       	mov	r24, r22
     fa4:	94 2f       	mov	r25, r20
     fa6:	a3 2f       	mov	r26, r19
     fa8:	b2 2f       	mov	r27, r18
     faa:	9c 01       	movw	r18, r24
     fac:	ad 01       	movw	r20, r26
     fae:	89 a1       	ldd	r24, Y+33	; 0x21
     fb0:	9a a1       	ldd	r25, Y+34	; 0x22
     fb2:	ab a1       	ldd	r26, Y+35	; 0x23
     fb4:	bc a1       	ldd	r27, Y+36	; 0x24
     fb6:	86 0d       	add	r24, r6
     fb8:	97 1d       	adc	r25, r7
     fba:	a8 1d       	adc	r26, r8
     fbc:	b9 1d       	adc	r27, r9
     fbe:	2d a0       	ldd	r2, Y+37	; 0x25
     fc0:	3e a0       	ldd	r3, Y+38	; 0x26
     fc2:	4f a0       	ldd	r4, Y+39	; 0x27
     fc4:	58 a4       	ldd	r5, Y+40	; 0x28
     fc6:	12 01       	movw	r2, r4
     fc8:	44 24       	eor	r4, r4
     fca:	55 24       	eor	r5, r5
     fcc:	29 a2       	std	Y+33, r2	; 0x21
     fce:	3a a2       	std	Y+34, r3	; 0x22
     fd0:	4b a2       	std	Y+35, r4	; 0x23
     fd2:	5c a2       	std	Y+36, r5	; 0x24
     fd4:	82 0d       	add	r24, r2
     fd6:	93 1d       	adc	r25, r3
     fd8:	a4 1d       	adc	r26, r4
     fda:	b5 1d       	adc	r27, r5
     fdc:	86 15       	cp	r24, r6
     fde:	97 05       	cpc	r25, r7
     fe0:	a8 05       	cpc	r26, r8
     fe2:	b9 05       	cpc	r27, r9
     fe4:	20 f4       	brcc	.+8      	; 0xfee <__muldi3+0x13c>
     fe6:	20 50       	subi	r18, 0x00	; 0
     fe8:	30 40       	sbci	r19, 0x00	; 0
     fea:	4f 4f       	sbci	r20, 0xFF	; 255
     fec:	5f 4f       	sbci	r21, 0xFF	; 255
     fee:	2d 01       	movw	r4, r26
     ff0:	66 24       	eor	r6, r6
     ff2:	77 24       	eor	r7, r7
     ff4:	42 0e       	add	r4, r18
     ff6:	53 1e       	adc	r5, r19
     ff8:	64 1e       	adc	r6, r20
     ffa:	75 1e       	adc	r7, r21
     ffc:	4d 8e       	std	Y+29, r4	; 0x1d
     ffe:	5e 8e       	std	Y+30, r5	; 0x1e
    1000:	6f 8e       	std	Y+31, r6	; 0x1f
    1002:	78 a2       	std	Y+32, r7	; 0x20
    1004:	4c 01       	movw	r8, r24
    1006:	77 24       	eor	r7, r7
    1008:	66 24       	eor	r6, r6
    100a:	8d a1       	ldd	r24, Y+37	; 0x25
    100c:	9e a1       	ldd	r25, Y+38	; 0x26
    100e:	af a1       	ldd	r26, Y+39	; 0x27
    1010:	b8 a5       	ldd	r27, Y+40	; 0x28
    1012:	a0 70       	andi	r26, 0x00	; 0
    1014:	b0 70       	andi	r27, 0x00	; 0
    1016:	68 0e       	add	r6, r24
    1018:	79 1e       	adc	r7, r25
    101a:	8a 1e       	adc	r8, r26
    101c:	9b 1e       	adc	r9, r27
    101e:	69 8e       	std	Y+25, r6	; 0x19
    1020:	7a 8e       	std	Y+26, r7	; 0x1a
    1022:	8b 8e       	std	Y+27, r8	; 0x1b
    1024:	9c 8e       	std	Y+28, r9	; 0x1c
    1026:	2a 8c       	ldd	r2, Y+26	; 0x1a
    1028:	9b 8c       	ldd	r9, Y+27	; 0x1b
    102a:	8c 8c       	ldd	r8, Y+28	; 0x1c
    102c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    102e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1030:	88 a1       	ldd	r24, Y+32	; 0x20
    1032:	fe 01       	movw	r30, r28
    1034:	71 96       	adiw	r30, 0x11	; 17
    1036:	38 e0       	ldi	r19, 0x08	; 8
    1038:	df 01       	movw	r26, r30
    103a:	1d 92       	st	X+, r1
    103c:	3a 95       	dec	r19
    103e:	e9 f7       	brne	.-6      	; 0x103a <__muldi3+0x188>
    1040:	4d 8a       	std	Y+21, r4	; 0x15
    1042:	2e 8b       	std	Y+22, r18	; 0x16
    1044:	9f 8b       	std	Y+23, r25	; 0x17
    1046:	88 8f       	std	Y+24, r24	; 0x18
    1048:	c8 01       	movw	r24, r16
    104a:	b7 01       	movw	r22, r14
    104c:	2d 85       	ldd	r18, Y+13	; 0x0d
    104e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1050:	4f 85       	ldd	r20, Y+15	; 0x0f
    1052:	58 89       	ldd	r21, Y+16	; 0x10
    1054:	c8 d6       	rcall	.+3472   	; 0x1de6 <__mulsi3>
    1056:	7b 01       	movw	r14, r22
    1058:	8c 01       	movw	r16, r24
    105a:	c6 01       	movw	r24, r12
    105c:	b5 01       	movw	r22, r10
    105e:	2d 81       	ldd	r18, Y+5	; 0x05
    1060:	3e 81       	ldd	r19, Y+6	; 0x06
    1062:	4f 81       	ldd	r20, Y+7	; 0x07
    1064:	58 85       	ldd	r21, Y+8	; 0x08
    1066:	bf d6       	rcall	.+3454   	; 0x1de6 <__mulsi3>
    1068:	9b 01       	movw	r18, r22
    106a:	ac 01       	movw	r20, r24
    106c:	2e 0d       	add	r18, r14
    106e:	3f 1d       	adc	r19, r15
    1070:	40 1f       	adc	r20, r16
    1072:	51 1f       	adc	r21, r17
    1074:	8d 89       	ldd	r24, Y+21	; 0x15
    1076:	9e 89       	ldd	r25, Y+22	; 0x16
    1078:	af 89       	ldd	r26, Y+23	; 0x17
    107a:	b8 8d       	ldd	r27, Y+24	; 0x18
    107c:	82 0f       	add	r24, r18
    107e:	93 1f       	adc	r25, r19
    1080:	a4 1f       	adc	r26, r20
    1082:	b5 1f       	adc	r27, r21
    1084:	8d 8b       	std	Y+21, r24	; 0x15
    1086:	9e 8b       	std	Y+22, r25	; 0x16
    1088:	af 8b       	std	Y+23, r26	; 0x17
    108a:	b8 8f       	std	Y+24, r27	; 0x18
    108c:	68 2f       	mov	r22, r24
    108e:	7e 89       	ldd	r23, Y+22	; 0x16
    1090:	26 2d       	mov	r18, r6
    1092:	32 2d       	mov	r19, r2
    1094:	49 2d       	mov	r20, r9
    1096:	58 2d       	mov	r21, r8
    1098:	8f 89       	ldd	r24, Y+23	; 0x17
    109a:	98 8d       	ldd	r25, Y+24	; 0x18
    109c:	e0 96       	adiw	r28, 0x30	; 48
    109e:	e2 e1       	ldi	r30, 0x12	; 18
    10a0:	f9 c6       	rjmp	.+3570   	; 0x1e94 <__epilogue_restores__>

000010a2 <__udivdi3>:
    10a2:	a8 e3       	ldi	r26, 0x38	; 56
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e6 e5       	ldi	r30, 0x56	; 86
    10a8:	f8 e0       	ldi	r31, 0x08	; 8
    10aa:	d8 c6       	rjmp	.+3504   	; 0x1e5c <__prologue_saves__>
    10ac:	e8 e0       	ldi	r30, 0x08	; 8
    10ae:	4e 01       	movw	r8, r28
    10b0:	08 94       	sec
    10b2:	81 1c       	adc	r8, r1
    10b4:	91 1c       	adc	r9, r1
    10b6:	d4 01       	movw	r26, r8
    10b8:	fe 2f       	mov	r31, r30
    10ba:	1d 92       	st	X+, r1
    10bc:	fa 95       	dec	r31
    10be:	e9 f7       	brne	.-6      	; 0x10ba <__udivdi3+0x18>
    10c0:	29 83       	std	Y+1, r18	; 0x01
    10c2:	3a 83       	std	Y+2, r19	; 0x02
    10c4:	4b 83       	std	Y+3, r20	; 0x03
    10c6:	5c 83       	std	Y+4, r21	; 0x04
    10c8:	6d 83       	std	Y+5, r22	; 0x05
    10ca:	7e 83       	std	Y+6, r23	; 0x06
    10cc:	8f 83       	std	Y+7, r24	; 0x07
    10ce:	98 87       	std	Y+8, r25	; 0x08
    10d0:	ce 01       	movw	r24, r28
    10d2:	09 96       	adiw	r24, 0x09	; 9
    10d4:	dc 01       	movw	r26, r24
    10d6:	1d 92       	st	X+, r1
    10d8:	ea 95       	dec	r30
    10da:	e9 f7       	brne	.-6      	; 0x10d6 <__udivdi3+0x34>
    10dc:	a9 86       	std	Y+9, r10	; 0x09
    10de:	ba 86       	std	Y+10, r11	; 0x0a
    10e0:	cb 86       	std	Y+11, r12	; 0x0b
    10e2:	dc 86       	std	Y+12, r13	; 0x0c
    10e4:	ed 86       	std	Y+13, r14	; 0x0d
    10e6:	fe 86       	std	Y+14, r15	; 0x0e
    10e8:	0f 87       	std	Y+15, r16	; 0x0f
    10ea:	18 8b       	std	Y+16, r17	; 0x10
    10ec:	e9 84       	ldd	r14, Y+9	; 0x09
    10ee:	fa 84       	ldd	r15, Y+10	; 0x0a
    10f0:	0b 85       	ldd	r16, Y+11	; 0x0b
    10f2:	1c 85       	ldd	r17, Y+12	; 0x0c
    10f4:	4d 84       	ldd	r4, Y+13	; 0x0d
    10f6:	5e 84       	ldd	r5, Y+14	; 0x0e
    10f8:	6f 84       	ldd	r6, Y+15	; 0x0f
    10fa:	78 88       	ldd	r7, Y+16	; 0x10
    10fc:	89 80       	ldd	r8, Y+1	; 0x01
    10fe:	9a 80       	ldd	r9, Y+2	; 0x02
    1100:	ab 80       	ldd	r10, Y+3	; 0x03
    1102:	bc 80       	ldd	r11, Y+4	; 0x04
    1104:	89 a2       	std	Y+33, r8	; 0x21
    1106:	9a a2       	std	Y+34, r9	; 0x22
    1108:	ab a2       	std	Y+35, r10	; 0x23
    110a:	bc a2       	std	Y+36, r11	; 0x24
    110c:	ad 80       	ldd	r10, Y+5	; 0x05
    110e:	be 80       	ldd	r11, Y+6	; 0x06
    1110:	cf 80       	ldd	r12, Y+7	; 0x07
    1112:	d8 84       	ldd	r13, Y+8	; 0x08
    1114:	41 14       	cp	r4, r1
    1116:	51 04       	cpc	r5, r1
    1118:	61 04       	cpc	r6, r1
    111a:	71 04       	cpc	r7, r1
    111c:	09 f0       	breq	.+2      	; 0x1120 <__udivdi3+0x7e>
    111e:	dc c3       	rjmp	.+1976   	; 0x18d8 <__udivdi3+0x836>
    1120:	ae 14       	cp	r10, r14
    1122:	bf 04       	cpc	r11, r15
    1124:	c0 06       	cpc	r12, r16
    1126:	d1 06       	cpc	r13, r17
    1128:	08 f0       	brcs	.+2      	; 0x112c <__udivdi3+0x8a>
    112a:	33 c1       	rjmp	.+614    	; 0x1392 <__udivdi3+0x2f0>
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	e2 16       	cp	r14, r18
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	f2 06       	cpc	r15, r18
    1134:	21 e0       	ldi	r18, 0x01	; 1
    1136:	02 07       	cpc	r16, r18
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	12 07       	cpc	r17, r18
    113c:	80 f4       	brcc	.+32     	; 0x115e <__udivdi3+0xbc>
    113e:	3f ef       	ldi	r19, 0xFF	; 255
    1140:	e3 16       	cp	r14, r19
    1142:	f1 04       	cpc	r15, r1
    1144:	01 05       	cpc	r16, r1
    1146:	11 05       	cpc	r17, r1
    1148:	31 f0       	breq	.+12     	; 0x1156 <__udivdi3+0xb4>
    114a:	28 f0       	brcs	.+10     	; 0x1156 <__udivdi3+0xb4>
    114c:	88 e0       	ldi	r24, 0x08	; 8
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a0 e0       	ldi	r26, 0x00	; 0
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	16 c0       	rjmp	.+44     	; 0x1182 <__udivdi3+0xe0>
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	dc 01       	movw	r26, r24
    115c:	12 c0       	rjmp	.+36     	; 0x1182 <__udivdi3+0xe0>
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	e4 16       	cp	r14, r20
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	f4 06       	cpc	r15, r20
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	04 07       	cpc	r16, r20
    116a:	41 e0       	ldi	r20, 0x01	; 1
    116c:	14 07       	cpc	r17, r20
    116e:	28 f0       	brcs	.+10     	; 0x117a <__udivdi3+0xd8>
    1170:	88 e1       	ldi	r24, 0x18	; 24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	a0 e0       	ldi	r26, 0x00	; 0
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	04 c0       	rjmp	.+8      	; 0x1182 <__udivdi3+0xe0>
    117a:	80 e1       	ldi	r24, 0x10	; 16
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	a0 e0       	ldi	r26, 0x00	; 0
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	a8 01       	movw	r20, r16
    1184:	97 01       	movw	r18, r14
    1186:	08 2e       	mov	r0, r24
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <__udivdi3+0xf0>
    118a:	56 95       	lsr	r21
    118c:	47 95       	ror	r20
    118e:	37 95       	ror	r19
    1190:	27 95       	ror	r18
    1192:	0a 94       	dec	r0
    1194:	d2 f7       	brpl	.-12     	; 0x118a <__udivdi3+0xe8>
    1196:	f9 01       	movw	r30, r18
    1198:	ec 59       	subi	r30, 0x9C	; 156
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	30 81       	ld	r19, Z
    119e:	40 e2       	ldi	r20, 0x20	; 32
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	2a 01       	movw	r4, r20
    11a8:	3b 01       	movw	r6, r22
    11aa:	48 1a       	sub	r4, r24
    11ac:	59 0a       	sbc	r5, r25
    11ae:	6a 0a       	sbc	r6, r26
    11b0:	7b 0a       	sbc	r7, r27
    11b2:	43 01       	movw	r8, r6
    11b4:	32 01       	movw	r6, r4
    11b6:	63 1a       	sub	r6, r19
    11b8:	71 08       	sbc	r7, r1
    11ba:	81 08       	sbc	r8, r1
    11bc:	91 08       	sbc	r9, r1
    11be:	a4 01       	movw	r20, r8
    11c0:	93 01       	movw	r18, r6
    11c2:	61 14       	cp	r6, r1
    11c4:	71 04       	cpc	r7, r1
    11c6:	81 04       	cpc	r8, r1
    11c8:	91 04       	cpc	r9, r1
    11ca:	b9 f1       	breq	.+110    	; 0x123a <__udivdi3+0x198>
    11cc:	96 2d       	mov	r25, r6
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <__udivdi3+0x136>
    11d0:	ee 0c       	add	r14, r14
    11d2:	ff 1c       	adc	r15, r15
    11d4:	00 1f       	adc	r16, r16
    11d6:	11 1f       	adc	r17, r17
    11d8:	6a 94       	dec	r6
    11da:	d2 f7       	brpl	.-12     	; 0x11d0 <__udivdi3+0x12e>
    11dc:	45 01       	movw	r8, r10
    11de:	56 01       	movw	r10, r12
    11e0:	02 2e       	mov	r0, r18
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <__udivdi3+0x14a>
    11e4:	88 0c       	add	r8, r8
    11e6:	99 1c       	adc	r9, r9
    11e8:	aa 1c       	adc	r10, r10
    11ea:	bb 1c       	adc	r11, r11
    11ec:	0a 94       	dec	r0
    11ee:	d2 f7       	brpl	.-12     	; 0x11e4 <__udivdi3+0x142>
    11f0:	60 e2       	ldi	r22, 0x20	; 32
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	6b 01       	movw	r12, r22
    11f6:	c2 1a       	sub	r12, r18
    11f8:	d3 0a       	sbc	r13, r19
    11fa:	49 a0       	ldd	r4, Y+33	; 0x21
    11fc:	5a a0       	ldd	r5, Y+34	; 0x22
    11fe:	6b a0       	ldd	r6, Y+35	; 0x23
    1200:	7c a0       	ldd	r7, Y+36	; 0x24
    1202:	04 c0       	rjmp	.+8      	; 0x120c <__udivdi3+0x16a>
    1204:	76 94       	lsr	r7
    1206:	67 94       	ror	r6
    1208:	57 94       	ror	r5
    120a:	47 94       	ror	r4
    120c:	ca 94       	dec	r12
    120e:	d2 f7       	brpl	.-12     	; 0x1204 <__udivdi3+0x162>
    1210:	65 01       	movw	r12, r10
    1212:	54 01       	movw	r10, r8
    1214:	a4 28       	or	r10, r4
    1216:	b5 28       	or	r11, r5
    1218:	c6 28       	or	r12, r6
    121a:	d7 28       	or	r13, r7
    121c:	69 a0       	ldd	r6, Y+33	; 0x21
    121e:	7a a0       	ldd	r7, Y+34	; 0x22
    1220:	8b a0       	ldd	r8, Y+35	; 0x23
    1222:	9c a0       	ldd	r9, Y+36	; 0x24
    1224:	04 c0       	rjmp	.+8      	; 0x122e <__udivdi3+0x18c>
    1226:	66 0c       	add	r6, r6
    1228:	77 1c       	adc	r7, r7
    122a:	88 1c       	adc	r8, r8
    122c:	99 1c       	adc	r9, r9
    122e:	9a 95       	dec	r25
    1230:	d2 f7       	brpl	.-12     	; 0x1226 <__udivdi3+0x184>
    1232:	69 a2       	std	Y+33, r6	; 0x21
    1234:	7a a2       	std	Y+34, r7	; 0x22
    1236:	8b a2       	std	Y+35, r8	; 0x23
    1238:	9c a2       	std	Y+36, r9	; 0x24
    123a:	38 01       	movw	r6, r16
    123c:	88 24       	eor	r8, r8
    123e:	99 24       	eor	r9, r9
    1240:	a8 01       	movw	r20, r16
    1242:	97 01       	movw	r18, r14
    1244:	40 70       	andi	r20, 0x00	; 0
    1246:	50 70       	andi	r21, 0x00	; 0
    1248:	2d 8f       	std	Y+29, r18	; 0x1d
    124a:	3e 8f       	std	Y+30, r19	; 0x1e
    124c:	4f 8f       	std	Y+31, r20	; 0x1f
    124e:	58 a3       	std	Y+32, r21	; 0x20
    1250:	c6 01       	movw	r24, r12
    1252:	b5 01       	movw	r22, r10
    1254:	a4 01       	movw	r20, r8
    1256:	93 01       	movw	r18, r6
    1258:	df d5       	rcall	.+3006   	; 0x1e18 <__udivmodsi4>
    125a:	1b 01       	movw	r2, r22
    125c:	2c 01       	movw	r4, r24
    125e:	c6 01       	movw	r24, r12
    1260:	b5 01       	movw	r22, r10
    1262:	a4 01       	movw	r20, r8
    1264:	93 01       	movw	r18, r6
    1266:	d8 d5       	rcall	.+2992   	; 0x1e18 <__udivmodsi4>
    1268:	a2 2e       	mov	r10, r18
    126a:	b3 2e       	mov	r11, r19
    126c:	c4 2e       	mov	r12, r20
    126e:	d5 2e       	mov	r13, r21
    1270:	c6 01       	movw	r24, r12
    1272:	b5 01       	movw	r22, r10
    1274:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1276:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1278:	4f 8d       	ldd	r20, Y+31	; 0x1f
    127a:	58 a1       	ldd	r21, Y+32	; 0x20
    127c:	b4 d5       	rcall	.+2920   	; 0x1de6 <__mulsi3>
    127e:	ab 01       	movw	r20, r22
    1280:	bc 01       	movw	r22, r24
    1282:	21 01       	movw	r4, r2
    1284:	33 24       	eor	r3, r3
    1286:	22 24       	eor	r2, r2
    1288:	89 a1       	ldd	r24, Y+33	; 0x21
    128a:	9a a1       	ldd	r25, Y+34	; 0x22
    128c:	ab a1       	ldd	r26, Y+35	; 0x23
    128e:	bc a1       	ldd	r27, Y+36	; 0x24
    1290:	cd 01       	movw	r24, r26
    1292:	aa 27       	eor	r26, r26
    1294:	bb 27       	eor	r27, r27
    1296:	28 2a       	or	r2, r24
    1298:	39 2a       	or	r3, r25
    129a:	4a 2a       	or	r4, r26
    129c:	5b 2a       	or	r5, r27
    129e:	24 16       	cp	r2, r20
    12a0:	35 06       	cpc	r3, r21
    12a2:	46 06       	cpc	r4, r22
    12a4:	57 06       	cpc	r5, r23
    12a6:	e0 f4       	brcc	.+56     	; 0x12e0 <__udivdi3+0x23e>
    12a8:	08 94       	sec
    12aa:	a1 08       	sbc	r10, r1
    12ac:	b1 08       	sbc	r11, r1
    12ae:	c1 08       	sbc	r12, r1
    12b0:	d1 08       	sbc	r13, r1
    12b2:	2e 0c       	add	r2, r14
    12b4:	3f 1c       	adc	r3, r15
    12b6:	40 1e       	adc	r4, r16
    12b8:	51 1e       	adc	r5, r17
    12ba:	2e 14       	cp	r2, r14
    12bc:	3f 04       	cpc	r3, r15
    12be:	40 06       	cpc	r4, r16
    12c0:	51 06       	cpc	r5, r17
    12c2:	70 f0       	brcs	.+28     	; 0x12e0 <__udivdi3+0x23e>
    12c4:	24 16       	cp	r2, r20
    12c6:	35 06       	cpc	r3, r21
    12c8:	46 06       	cpc	r4, r22
    12ca:	57 06       	cpc	r5, r23
    12cc:	48 f4       	brcc	.+18     	; 0x12e0 <__udivdi3+0x23e>
    12ce:	08 94       	sec
    12d0:	a1 08       	sbc	r10, r1
    12d2:	b1 08       	sbc	r11, r1
    12d4:	c1 08       	sbc	r12, r1
    12d6:	d1 08       	sbc	r13, r1
    12d8:	2e 0c       	add	r2, r14
    12da:	3f 1c       	adc	r3, r15
    12dc:	40 1e       	adc	r4, r16
    12de:	51 1e       	adc	r5, r17
    12e0:	24 1a       	sub	r2, r20
    12e2:	35 0a       	sbc	r3, r21
    12e4:	46 0a       	sbc	r4, r22
    12e6:	57 0a       	sbc	r5, r23
    12e8:	c2 01       	movw	r24, r4
    12ea:	b1 01       	movw	r22, r2
    12ec:	a4 01       	movw	r20, r8
    12ee:	93 01       	movw	r18, r6
    12f0:	93 d5       	rcall	.+2854   	; 0x1e18 <__udivmodsi4>
    12f2:	69 8f       	std	Y+25, r22	; 0x19
    12f4:	7a 8f       	std	Y+26, r23	; 0x1a
    12f6:	8b 8f       	std	Y+27, r24	; 0x1b
    12f8:	9c 8f       	std	Y+28, r25	; 0x1c
    12fa:	c2 01       	movw	r24, r4
    12fc:	b1 01       	movw	r22, r2
    12fe:	a4 01       	movw	r20, r8
    1300:	93 01       	movw	r18, r6
    1302:	8a d5       	rcall	.+2836   	; 0x1e18 <__udivmodsi4>
    1304:	62 2e       	mov	r6, r18
    1306:	73 2e       	mov	r7, r19
    1308:	84 2e       	mov	r8, r20
    130a:	95 2e       	mov	r9, r21
    130c:	c4 01       	movw	r24, r8
    130e:	b3 01       	movw	r22, r6
    1310:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1312:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1314:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1316:	58 a1       	ldd	r21, Y+32	; 0x20
    1318:	66 d5       	rcall	.+2764   	; 0x1de6 <__mulsi3>
    131a:	ab 01       	movw	r20, r22
    131c:	bc 01       	movw	r22, r24
    131e:	89 8d       	ldd	r24, Y+25	; 0x19
    1320:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1322:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1324:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1326:	2c 01       	movw	r4, r24
    1328:	33 24       	eor	r3, r3
    132a:	22 24       	eor	r2, r2
    132c:	89 a1       	ldd	r24, Y+33	; 0x21
    132e:	9a a1       	ldd	r25, Y+34	; 0x22
    1330:	ab a1       	ldd	r26, Y+35	; 0x23
    1332:	bc a1       	ldd	r27, Y+36	; 0x24
    1334:	a0 70       	andi	r26, 0x00	; 0
    1336:	b0 70       	andi	r27, 0x00	; 0
    1338:	82 29       	or	r24, r2
    133a:	93 29       	or	r25, r3
    133c:	a4 29       	or	r26, r4
    133e:	b5 29       	or	r27, r5
    1340:	84 17       	cp	r24, r20
    1342:	95 07       	cpc	r25, r21
    1344:	a6 07       	cpc	r26, r22
    1346:	b7 07       	cpc	r27, r23
    1348:	c0 f4       	brcc	.+48     	; 0x137a <__udivdi3+0x2d8>
    134a:	08 94       	sec
    134c:	61 08       	sbc	r6, r1
    134e:	71 08       	sbc	r7, r1
    1350:	81 08       	sbc	r8, r1
    1352:	91 08       	sbc	r9, r1
    1354:	8e 0d       	add	r24, r14
    1356:	9f 1d       	adc	r25, r15
    1358:	a0 1f       	adc	r26, r16
    135a:	b1 1f       	adc	r27, r17
    135c:	8e 15       	cp	r24, r14
    135e:	9f 05       	cpc	r25, r15
    1360:	a0 07       	cpc	r26, r16
    1362:	b1 07       	cpc	r27, r17
    1364:	50 f0       	brcs	.+20     	; 0x137a <__udivdi3+0x2d8>
    1366:	84 17       	cp	r24, r20
    1368:	95 07       	cpc	r25, r21
    136a:	a6 07       	cpc	r26, r22
    136c:	b7 07       	cpc	r27, r23
    136e:	28 f4       	brcc	.+10     	; 0x137a <__udivdi3+0x2d8>
    1370:	08 94       	sec
    1372:	61 08       	sbc	r6, r1
    1374:	71 08       	sbc	r7, r1
    1376:	81 08       	sbc	r8, r1
    1378:	91 08       	sbc	r9, r1
    137a:	65 01       	movw	r12, r10
    137c:	bb 24       	eor	r11, r11
    137e:	aa 24       	eor	r10, r10
    1380:	84 01       	movw	r16, r8
    1382:	73 01       	movw	r14, r6
    1384:	ea 28       	or	r14, r10
    1386:	fb 28       	or	r15, r11
    1388:	0c 29       	or	r16, r12
    138a:	1d 29       	or	r17, r13
    138c:	47 01       	movw	r8, r14
    138e:	58 01       	movw	r10, r16
    1390:	f9 c4       	rjmp	.+2546   	; 0x1d84 <__udivdi3+0xce2>
    1392:	e1 14       	cp	r14, r1
    1394:	f1 04       	cpc	r15, r1
    1396:	01 05       	cpc	r16, r1
    1398:	11 05       	cpc	r17, r1
    139a:	69 f4       	brne	.+26     	; 0x13b6 <__udivdi3+0x314>
    139c:	61 e0       	ldi	r22, 0x01	; 1
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	a9 01       	movw	r20, r18
    13aa:	36 d5       	rcall	.+2668   	; 0x1e18 <__udivmodsi4>
    13ac:	e2 2e       	mov	r14, r18
    13ae:	f3 2e       	mov	r15, r19
    13b0:	04 2f       	mov	r16, r20
    13b2:	15 2f       	mov	r17, r21
    13b4:	15 c0       	rjmp	.+42     	; 0x13e0 <__udivdi3+0x33e>
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	e2 16       	cp	r14, r18
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	f2 06       	cpc	r15, r18
    13be:	21 e0       	ldi	r18, 0x01	; 1
    13c0:	02 07       	cpc	r16, r18
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	12 07       	cpc	r17, r18
    13c6:	80 f4       	brcc	.+32     	; 0x13e8 <__udivdi3+0x346>
    13c8:	3f ef       	ldi	r19, 0xFF	; 255
    13ca:	e3 16       	cp	r14, r19
    13cc:	f1 04       	cpc	r15, r1
    13ce:	01 05       	cpc	r16, r1
    13d0:	11 05       	cpc	r17, r1
    13d2:	31 f0       	breq	.+12     	; 0x13e0 <__udivdi3+0x33e>
    13d4:	28 f0       	brcs	.+10     	; 0x13e0 <__udivdi3+0x33e>
    13d6:	88 e0       	ldi	r24, 0x08	; 8
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	a0 e0       	ldi	r26, 0x00	; 0
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	16 c0       	rjmp	.+44     	; 0x140c <__udivdi3+0x36a>
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	dc 01       	movw	r26, r24
    13e6:	12 c0       	rjmp	.+36     	; 0x140c <__udivdi3+0x36a>
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	e4 16       	cp	r14, r20
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	f4 06       	cpc	r15, r20
    13f0:	40 e0       	ldi	r20, 0x00	; 0
    13f2:	04 07       	cpc	r16, r20
    13f4:	41 e0       	ldi	r20, 0x01	; 1
    13f6:	14 07       	cpc	r17, r20
    13f8:	28 f0       	brcs	.+10     	; 0x1404 <__udivdi3+0x362>
    13fa:	88 e1       	ldi	r24, 0x18	; 24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a0 e0       	ldi	r26, 0x00	; 0
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	04 c0       	rjmp	.+8      	; 0x140c <__udivdi3+0x36a>
    1404:	80 e1       	ldi	r24, 0x10	; 16
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a0 e0       	ldi	r26, 0x00	; 0
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	a8 01       	movw	r20, r16
    140e:	97 01       	movw	r18, r14
    1410:	08 2e       	mov	r0, r24
    1412:	04 c0       	rjmp	.+8      	; 0x141c <__udivdi3+0x37a>
    1414:	56 95       	lsr	r21
    1416:	47 95       	ror	r20
    1418:	37 95       	ror	r19
    141a:	27 95       	ror	r18
    141c:	0a 94       	dec	r0
    141e:	d2 f7       	brpl	.-12     	; 0x1414 <__udivdi3+0x372>
    1420:	f9 01       	movw	r30, r18
    1422:	ec 59       	subi	r30, 0x9C	; 156
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	20 81       	ld	r18, Z
    1428:	82 0f       	add	r24, r18
    142a:	91 1d       	adc	r25, r1
    142c:	a1 1d       	adc	r26, r1
    142e:	b1 1d       	adc	r27, r1
    1430:	20 e2       	ldi	r18, 0x20	; 32
    1432:	22 2e       	mov	r2, r18
    1434:	31 2c       	mov	r3, r1
    1436:	41 2c       	mov	r4, r1
    1438:	51 2c       	mov	r5, r1
    143a:	28 1a       	sub	r2, r24
    143c:	39 0a       	sbc	r3, r25
    143e:	4a 0a       	sbc	r4, r26
    1440:	5b 0a       	sbc	r5, r27
    1442:	81 f4       	brne	.+32     	; 0x1464 <__udivdi3+0x3c2>
    1444:	d6 01       	movw	r26, r12
    1446:	c5 01       	movw	r24, r10
    1448:	8e 19       	sub	r24, r14
    144a:	9f 09       	sbc	r25, r15
    144c:	a0 0b       	sbc	r26, r16
    144e:	b1 0b       	sbc	r27, r17
    1450:	8d 8f       	std	Y+29, r24	; 0x1d
    1452:	9e 8f       	std	Y+30, r25	; 0x1e
    1454:	af 8f       	std	Y+31, r26	; 0x1f
    1456:	b8 a3       	std	Y+32, r27	; 0x20
    1458:	a1 e0       	ldi	r26, 0x01	; 1
    145a:	4a 2e       	mov	r4, r26
    145c:	51 2c       	mov	r5, r1
    145e:	61 2c       	mov	r6, r1
    1460:	71 2c       	mov	r7, r1
    1462:	3c c1       	rjmp	.+632    	; 0x16dc <__udivdi3+0x63a>
    1464:	02 2c       	mov	r0, r2
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <__udivdi3+0x3ce>
    1468:	ee 0c       	add	r14, r14
    146a:	ff 1c       	adc	r15, r15
    146c:	00 1f       	adc	r16, r16
    146e:	11 1f       	adc	r17, r17
    1470:	0a 94       	dec	r0
    1472:	d2 f7       	brpl	.-12     	; 0x1468 <__udivdi3+0x3c6>
    1474:	35 01       	movw	r6, r10
    1476:	46 01       	movw	r8, r12
    1478:	08 2e       	mov	r0, r24
    147a:	04 c0       	rjmp	.+8      	; 0x1484 <__udivdi3+0x3e2>
    147c:	96 94       	lsr	r9
    147e:	87 94       	ror	r8
    1480:	77 94       	ror	r7
    1482:	67 94       	ror	r6
    1484:	0a 94       	dec	r0
    1486:	d2 f7       	brpl	.-12     	; 0x147c <__udivdi3+0x3da>
    1488:	02 2c       	mov	r0, r2
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <__udivdi3+0x3f2>
    148c:	aa 0c       	add	r10, r10
    148e:	bb 1c       	adc	r11, r11
    1490:	cc 1c       	adc	r12, r12
    1492:	dd 1c       	adc	r13, r13
    1494:	0a 94       	dec	r0
    1496:	d2 f7       	brpl	.-12     	; 0x148c <__udivdi3+0x3ea>
    1498:	29 a1       	ldd	r18, Y+33	; 0x21
    149a:	3a a1       	ldd	r19, Y+34	; 0x22
    149c:	4b a1       	ldd	r20, Y+35	; 0x23
    149e:	5c a1       	ldd	r21, Y+36	; 0x24
    14a0:	04 c0       	rjmp	.+8      	; 0x14aa <__udivdi3+0x408>
    14a2:	56 95       	lsr	r21
    14a4:	47 95       	ror	r20
    14a6:	37 95       	ror	r19
    14a8:	27 95       	ror	r18
    14aa:	8a 95       	dec	r24
    14ac:	d2 f7       	brpl	.-12     	; 0x14a2 <__udivdi3+0x400>
    14ae:	da 01       	movw	r26, r20
    14b0:	c9 01       	movw	r24, r18
    14b2:	a6 01       	movw	r20, r12
    14b4:	95 01       	movw	r18, r10
    14b6:	28 2b       	or	r18, r24
    14b8:	39 2b       	or	r19, r25
    14ba:	4a 2b       	or	r20, r26
    14bc:	5b 2b       	or	r21, r27
    14be:	2d a3       	std	Y+37, r18	; 0x25
    14c0:	3e a3       	std	Y+38, r19	; 0x26
    14c2:	4f a3       	std	Y+39, r20	; 0x27
    14c4:	58 a7       	std	Y+40, r21	; 0x28
    14c6:	c8 01       	movw	r24, r16
    14c8:	aa 27       	eor	r26, r26
    14ca:	bb 27       	eor	r27, r27
    14cc:	89 ab       	std	Y+49, r24	; 0x31
    14ce:	9a ab       	std	Y+50, r25	; 0x32
    14d0:	ab ab       	std	Y+51, r26	; 0x33
    14d2:	bc ab       	std	Y+52, r27	; 0x34
    14d4:	a8 01       	movw	r20, r16
    14d6:	97 01       	movw	r18, r14
    14d8:	40 70       	andi	r20, 0x00	; 0
    14da:	50 70       	andi	r21, 0x00	; 0
    14dc:	29 a7       	std	Y+41, r18	; 0x29
    14de:	3a a7       	std	Y+42, r19	; 0x2a
    14e0:	4b a7       	std	Y+43, r20	; 0x2b
    14e2:	5c a7       	std	Y+44, r21	; 0x2c
    14e4:	c4 01       	movw	r24, r8
    14e6:	b3 01       	movw	r22, r6
    14e8:	29 a9       	ldd	r18, Y+49	; 0x31
    14ea:	3a a9       	ldd	r19, Y+50	; 0x32
    14ec:	4b a9       	ldd	r20, Y+51	; 0x33
    14ee:	5c a9       	ldd	r21, Y+52	; 0x34
    14f0:	93 d4       	rcall	.+2342   	; 0x1e18 <__udivmodsi4>
    14f2:	69 8f       	std	Y+25, r22	; 0x19
    14f4:	7a 8f       	std	Y+26, r23	; 0x1a
    14f6:	8b 8f       	std	Y+27, r24	; 0x1b
    14f8:	9c 8f       	std	Y+28, r25	; 0x1c
    14fa:	c4 01       	movw	r24, r8
    14fc:	b3 01       	movw	r22, r6
    14fe:	29 a9       	ldd	r18, Y+49	; 0x31
    1500:	3a a9       	ldd	r19, Y+50	; 0x32
    1502:	4b a9       	ldd	r20, Y+51	; 0x33
    1504:	5c a9       	ldd	r21, Y+52	; 0x34
    1506:	88 d4       	rcall	.+2320   	; 0x1e18 <__udivmodsi4>
    1508:	82 2e       	mov	r8, r18
    150a:	93 2e       	mov	r9, r19
    150c:	a4 2e       	mov	r10, r20
    150e:	b5 2e       	mov	r11, r21
    1510:	c5 01       	movw	r24, r10
    1512:	b4 01       	movw	r22, r8
    1514:	29 a5       	ldd	r18, Y+41	; 0x29
    1516:	3a a5       	ldd	r19, Y+42	; 0x2a
    1518:	4b a5       	ldd	r20, Y+43	; 0x2b
    151a:	5c a5       	ldd	r21, Y+44	; 0x2c
    151c:	64 d4       	rcall	.+2248   	; 0x1de6 <__mulsi3>
    151e:	6d a7       	std	Y+45, r22	; 0x2d
    1520:	7e a7       	std	Y+46, r23	; 0x2e
    1522:	8f a7       	std	Y+47, r24	; 0x2f
    1524:	98 ab       	std	Y+48, r25	; 0x30
    1526:	89 8d       	ldd	r24, Y+25	; 0x19
    1528:	9a 8d       	ldd	r25, Y+26	; 0x1a
    152a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    152c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    152e:	dc 01       	movw	r26, r24
    1530:	99 27       	eor	r25, r25
    1532:	88 27       	eor	r24, r24
    1534:	89 8f       	std	Y+25, r24	; 0x19
    1536:	9a 8f       	std	Y+26, r25	; 0x1a
    1538:	ab 8f       	std	Y+27, r26	; 0x1b
    153a:	bc 8f       	std	Y+28, r27	; 0x1c
    153c:	4d a0       	ldd	r4, Y+37	; 0x25
    153e:	5e a0       	ldd	r5, Y+38	; 0x26
    1540:	6f a0       	ldd	r6, Y+39	; 0x27
    1542:	78 a4       	ldd	r7, Y+40	; 0x28
    1544:	23 01       	movw	r4, r6
    1546:	66 24       	eor	r6, r6
    1548:	77 24       	eor	r7, r7
    154a:	d3 01       	movw	r26, r6
    154c:	c2 01       	movw	r24, r4
    154e:	29 8d       	ldd	r18, Y+25	; 0x19
    1550:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1552:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1554:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1556:	82 2b       	or	r24, r18
    1558:	93 2b       	or	r25, r19
    155a:	a4 2b       	or	r26, r20
    155c:	b5 2b       	or	r27, r21
    155e:	4d a4       	ldd	r4, Y+45	; 0x2d
    1560:	5e a4       	ldd	r5, Y+46	; 0x2e
    1562:	6f a4       	ldd	r6, Y+47	; 0x2f
    1564:	78 a8       	ldd	r7, Y+48	; 0x30
    1566:	84 15       	cp	r24, r4
    1568:	95 05       	cpc	r25, r5
    156a:	a6 05       	cpc	r26, r6
    156c:	b7 05       	cpc	r27, r7
    156e:	e0 f4       	brcc	.+56     	; 0x15a8 <__udivdi3+0x506>
    1570:	08 94       	sec
    1572:	81 08       	sbc	r8, r1
    1574:	91 08       	sbc	r9, r1
    1576:	a1 08       	sbc	r10, r1
    1578:	b1 08       	sbc	r11, r1
    157a:	8e 0d       	add	r24, r14
    157c:	9f 1d       	adc	r25, r15
    157e:	a0 1f       	adc	r26, r16
    1580:	b1 1f       	adc	r27, r17
    1582:	8e 15       	cp	r24, r14
    1584:	9f 05       	cpc	r25, r15
    1586:	a0 07       	cpc	r26, r16
    1588:	b1 07       	cpc	r27, r17
    158a:	70 f0       	brcs	.+28     	; 0x15a8 <__udivdi3+0x506>
    158c:	84 15       	cp	r24, r4
    158e:	95 05       	cpc	r25, r5
    1590:	a6 05       	cpc	r26, r6
    1592:	b7 05       	cpc	r27, r7
    1594:	48 f4       	brcc	.+18     	; 0x15a8 <__udivdi3+0x506>
    1596:	08 94       	sec
    1598:	81 08       	sbc	r8, r1
    159a:	91 08       	sbc	r9, r1
    159c:	a1 08       	sbc	r10, r1
    159e:	b1 08       	sbc	r11, r1
    15a0:	8e 0d       	add	r24, r14
    15a2:	9f 1d       	adc	r25, r15
    15a4:	a0 1f       	adc	r26, r16
    15a6:	b1 1f       	adc	r27, r17
    15a8:	9c 01       	movw	r18, r24
    15aa:	ad 01       	movw	r20, r26
    15ac:	4d a4       	ldd	r4, Y+45	; 0x2d
    15ae:	5e a4       	ldd	r5, Y+46	; 0x2e
    15b0:	6f a4       	ldd	r6, Y+47	; 0x2f
    15b2:	78 a8       	ldd	r7, Y+48	; 0x30
    15b4:	24 19       	sub	r18, r4
    15b6:	35 09       	sbc	r19, r5
    15b8:	46 09       	sbc	r20, r6
    15ba:	57 09       	sbc	r21, r7
    15bc:	2d 8f       	std	Y+29, r18	; 0x1d
    15be:	3e 8f       	std	Y+30, r19	; 0x1e
    15c0:	4f 8f       	std	Y+31, r20	; 0x1f
    15c2:	58 a3       	std	Y+32, r21	; 0x20
    15c4:	ca 01       	movw	r24, r20
    15c6:	b9 01       	movw	r22, r18
    15c8:	29 a9       	ldd	r18, Y+49	; 0x31
    15ca:	3a a9       	ldd	r19, Y+50	; 0x32
    15cc:	4b a9       	ldd	r20, Y+51	; 0x33
    15ce:	5c a9       	ldd	r21, Y+52	; 0x34
    15d0:	23 d4       	rcall	.+2118   	; 0x1e18 <__udivmodsi4>
    15d2:	69 8f       	std	Y+25, r22	; 0x19
    15d4:	7a 8f       	std	Y+26, r23	; 0x1a
    15d6:	8b 8f       	std	Y+27, r24	; 0x1b
    15d8:	9c 8f       	std	Y+28, r25	; 0x1c
    15da:	6d 8d       	ldd	r22, Y+29	; 0x1d
    15dc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    15de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15e0:	98 a1       	ldd	r25, Y+32	; 0x20
    15e2:	29 a9       	ldd	r18, Y+49	; 0x31
    15e4:	3a a9       	ldd	r19, Y+50	; 0x32
    15e6:	4b a9       	ldd	r20, Y+51	; 0x33
    15e8:	5c a9       	ldd	r21, Y+52	; 0x34
    15ea:	16 d4       	rcall	.+2092   	; 0x1e18 <__udivmodsi4>
    15ec:	42 2e       	mov	r4, r18
    15ee:	53 2e       	mov	r5, r19
    15f0:	64 2e       	mov	r6, r20
    15f2:	75 2e       	mov	r7, r21
    15f4:	c3 01       	movw	r24, r6
    15f6:	b2 01       	movw	r22, r4
    15f8:	29 a5       	ldd	r18, Y+41	; 0x29
    15fa:	3a a5       	ldd	r19, Y+42	; 0x2a
    15fc:	4b a5       	ldd	r20, Y+43	; 0x2b
    15fe:	5c a5       	ldd	r21, Y+44	; 0x2c
    1600:	f2 d3       	rcall	.+2020   	; 0x1de6 <__mulsi3>
    1602:	69 a7       	std	Y+41, r22	; 0x29
    1604:	7a a7       	std	Y+42, r23	; 0x2a
    1606:	8b a7       	std	Y+43, r24	; 0x2b
    1608:	9c a7       	std	Y+44, r25	; 0x2c
    160a:	29 8d       	ldd	r18, Y+25	; 0x19
    160c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    160e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1610:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1612:	a9 01       	movw	r20, r18
    1614:	33 27       	eor	r19, r19
    1616:	22 27       	eor	r18, r18
    1618:	8d a1       	ldd	r24, Y+37	; 0x25
    161a:	9e a1       	ldd	r25, Y+38	; 0x26
    161c:	af a1       	ldd	r26, Y+39	; 0x27
    161e:	b8 a5       	ldd	r27, Y+40	; 0x28
    1620:	a0 70       	andi	r26, 0x00	; 0
    1622:	b0 70       	andi	r27, 0x00	; 0
    1624:	82 2b       	or	r24, r18
    1626:	93 2b       	or	r25, r19
    1628:	a4 2b       	or	r26, r20
    162a:	b5 2b       	or	r27, r21
    162c:	89 8f       	std	Y+25, r24	; 0x19
    162e:	9a 8f       	std	Y+26, r25	; 0x1a
    1630:	ab 8f       	std	Y+27, r26	; 0x1b
    1632:	bc 8f       	std	Y+28, r27	; 0x1c
    1634:	29 a5       	ldd	r18, Y+41	; 0x29
    1636:	3a a5       	ldd	r19, Y+42	; 0x2a
    1638:	4b a5       	ldd	r20, Y+43	; 0x2b
    163a:	5c a5       	ldd	r21, Y+44	; 0x2c
    163c:	82 17       	cp	r24, r18
    163e:	93 07       	cpc	r25, r19
    1640:	a4 07       	cpc	r26, r20
    1642:	b5 07       	cpc	r27, r21
    1644:	20 f5       	brcc	.+72     	; 0x168e <__udivdi3+0x5ec>
    1646:	08 94       	sec
    1648:	41 08       	sbc	r4, r1
    164a:	51 08       	sbc	r5, r1
    164c:	61 08       	sbc	r6, r1
    164e:	71 08       	sbc	r7, r1
    1650:	8e 0d       	add	r24, r14
    1652:	9f 1d       	adc	r25, r15
    1654:	a0 1f       	adc	r26, r16
    1656:	b1 1f       	adc	r27, r17
    1658:	89 8f       	std	Y+25, r24	; 0x19
    165a:	9a 8f       	std	Y+26, r25	; 0x1a
    165c:	ab 8f       	std	Y+27, r26	; 0x1b
    165e:	bc 8f       	std	Y+28, r27	; 0x1c
    1660:	8e 15       	cp	r24, r14
    1662:	9f 05       	cpc	r25, r15
    1664:	a0 07       	cpc	r26, r16
    1666:	b1 07       	cpc	r27, r17
    1668:	90 f0       	brcs	.+36     	; 0x168e <__udivdi3+0x5ec>
    166a:	82 17       	cp	r24, r18
    166c:	93 07       	cpc	r25, r19
    166e:	a4 07       	cpc	r26, r20
    1670:	b5 07       	cpc	r27, r21
    1672:	68 f4       	brcc	.+26     	; 0x168e <__udivdi3+0x5ec>
    1674:	08 94       	sec
    1676:	41 08       	sbc	r4, r1
    1678:	51 08       	sbc	r5, r1
    167a:	61 08       	sbc	r6, r1
    167c:	71 08       	sbc	r7, r1
    167e:	8e 0d       	add	r24, r14
    1680:	9f 1d       	adc	r25, r15
    1682:	a0 1f       	adc	r26, r16
    1684:	b1 1f       	adc	r27, r17
    1686:	89 8f       	std	Y+25, r24	; 0x19
    1688:	9a 8f       	std	Y+26, r25	; 0x1a
    168a:	ab 8f       	std	Y+27, r26	; 0x1b
    168c:	bc 8f       	std	Y+28, r27	; 0x1c
    168e:	89 a1       	ldd	r24, Y+33	; 0x21
    1690:	9a a1       	ldd	r25, Y+34	; 0x22
    1692:	ab a1       	ldd	r26, Y+35	; 0x23
    1694:	bc a1       	ldd	r27, Y+36	; 0x24
    1696:	02 2c       	mov	r0, r2
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <__udivdi3+0x600>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	aa 1f       	adc	r26, r26
    16a0:	bb 1f       	adc	r27, r27
    16a2:	0a 94       	dec	r0
    16a4:	d2 f7       	brpl	.-12     	; 0x169a <__udivdi3+0x5f8>
    16a6:	89 a3       	std	Y+33, r24	; 0x21
    16a8:	9a a3       	std	Y+34, r25	; 0x22
    16aa:	ab a3       	std	Y+35, r26	; 0x23
    16ac:	bc a3       	std	Y+36, r27	; 0x24
    16ae:	29 8d       	ldd	r18, Y+25	; 0x19
    16b0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    16b2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    16b4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    16b6:	89 a5       	ldd	r24, Y+41	; 0x29
    16b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    16ba:	ab a5       	ldd	r26, Y+43	; 0x2b
    16bc:	bc a5       	ldd	r27, Y+44	; 0x2c
    16be:	28 1b       	sub	r18, r24
    16c0:	39 0b       	sbc	r19, r25
    16c2:	4a 0b       	sbc	r20, r26
    16c4:	5b 0b       	sbc	r21, r27
    16c6:	2d 8f       	std	Y+29, r18	; 0x1d
    16c8:	3e 8f       	std	Y+30, r19	; 0x1e
    16ca:	4f 8f       	std	Y+31, r20	; 0x1f
    16cc:	58 a3       	std	Y+32, r21	; 0x20
    16ce:	54 01       	movw	r10, r8
    16d0:	99 24       	eor	r9, r9
    16d2:	88 24       	eor	r8, r8
    16d4:	48 28       	or	r4, r8
    16d6:	59 28       	or	r5, r9
    16d8:	6a 28       	or	r6, r10
    16da:	7b 28       	or	r7, r11
    16dc:	48 01       	movw	r8, r16
    16de:	aa 24       	eor	r10, r10
    16e0:	bb 24       	eor	r11, r11
    16e2:	8d a2       	std	Y+37, r8	; 0x25
    16e4:	9e a2       	std	Y+38, r9	; 0x26
    16e6:	af a2       	std	Y+39, r10	; 0x27
    16e8:	b8 a6       	std	Y+40, r11	; 0x28
    16ea:	a8 01       	movw	r20, r16
    16ec:	97 01       	movw	r18, r14
    16ee:	40 70       	andi	r20, 0x00	; 0
    16f0:	50 70       	andi	r21, 0x00	; 0
    16f2:	29 a7       	std	Y+41, r18	; 0x29
    16f4:	3a a7       	std	Y+42, r19	; 0x2a
    16f6:	4b a7       	std	Y+43, r20	; 0x2b
    16f8:	5c a7       	std	Y+44, r21	; 0x2c
    16fa:	6d 8d       	ldd	r22, Y+29	; 0x1d
    16fc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    16fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1700:	98 a1       	ldd	r25, Y+32	; 0x20
    1702:	a5 01       	movw	r20, r10
    1704:	94 01       	movw	r18, r8
    1706:	88 d3       	rcall	.+1808   	; 0x1e18 <__udivmodsi4>
    1708:	69 8f       	std	Y+25, r22	; 0x19
    170a:	7a 8f       	std	Y+26, r23	; 0x1a
    170c:	8b 8f       	std	Y+27, r24	; 0x1b
    170e:	9c 8f       	std	Y+28, r25	; 0x1c
    1710:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1712:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1714:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1716:	98 a1       	ldd	r25, Y+32	; 0x20
    1718:	a5 01       	movw	r20, r10
    171a:	94 01       	movw	r18, r8
    171c:	7d d3       	rcall	.+1786   	; 0x1e18 <__udivmodsi4>
    171e:	82 2e       	mov	r8, r18
    1720:	93 2e       	mov	r9, r19
    1722:	a4 2e       	mov	r10, r20
    1724:	b5 2e       	mov	r11, r21
    1726:	89 aa       	std	Y+49, r8	; 0x31
    1728:	9a aa       	std	Y+50, r9	; 0x32
    172a:	ab aa       	std	Y+51, r10	; 0x33
    172c:	bc aa       	std	Y+52, r11	; 0x34
    172e:	c5 01       	movw	r24, r10
    1730:	b4 01       	movw	r22, r8
    1732:	29 a5       	ldd	r18, Y+41	; 0x29
    1734:	3a a5       	ldd	r19, Y+42	; 0x2a
    1736:	4b a5       	ldd	r20, Y+43	; 0x2b
    1738:	5c a5       	ldd	r21, Y+44	; 0x2c
    173a:	55 d3       	rcall	.+1706   	; 0x1de6 <__mulsi3>
    173c:	9b 01       	movw	r18, r22
    173e:	6d a7       	std	Y+45, r22	; 0x2d
    1740:	3e a7       	std	Y+46, r19	; 0x2e
    1742:	8f a7       	std	Y+47, r24	; 0x2f
    1744:	98 ab       	std	Y+48, r25	; 0x30
    1746:	89 8d       	ldd	r24, Y+25	; 0x19
    1748:	9a 8d       	ldd	r25, Y+26	; 0x1a
    174a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    174c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    174e:	dc 01       	movw	r26, r24
    1750:	99 27       	eor	r25, r25
    1752:	88 27       	eor	r24, r24
    1754:	89 8f       	std	Y+25, r24	; 0x19
    1756:	9a 8f       	std	Y+26, r25	; 0x1a
    1758:	ab 8f       	std	Y+27, r26	; 0x1b
    175a:	bc 8f       	std	Y+28, r27	; 0x1c
    175c:	a9 a0       	ldd	r10, Y+33	; 0x21
    175e:	ba a0       	ldd	r11, Y+34	; 0x22
    1760:	cb a0       	ldd	r12, Y+35	; 0x23
    1762:	dc a0       	ldd	r13, Y+36	; 0x24
    1764:	46 01       	movw	r8, r12
    1766:	aa 24       	eor	r10, r10
    1768:	bb 24       	eor	r11, r11
    176a:	d5 01       	movw	r26, r10
    176c:	c4 01       	movw	r24, r8
    176e:	29 8d       	ldd	r18, Y+25	; 0x19
    1770:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1772:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1774:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1776:	82 2b       	or	r24, r18
    1778:	93 2b       	or	r25, r19
    177a:	a4 2b       	or	r26, r20
    177c:	b5 2b       	or	r27, r21
    177e:	8d a4       	ldd	r8, Y+45	; 0x2d
    1780:	9e a4       	ldd	r9, Y+46	; 0x2e
    1782:	af a4       	ldd	r10, Y+47	; 0x2f
    1784:	b8 a8       	ldd	r11, Y+48	; 0x30
    1786:	88 15       	cp	r24, r8
    1788:	99 05       	cpc	r25, r9
    178a:	aa 05       	cpc	r26, r10
    178c:	bb 05       	cpc	r27, r11
    178e:	30 f5       	brcc	.+76     	; 0x17dc <__udivdi3+0x73a>
    1790:	29 a9       	ldd	r18, Y+49	; 0x31
    1792:	3a a9       	ldd	r19, Y+50	; 0x32
    1794:	4b a9       	ldd	r20, Y+51	; 0x33
    1796:	5c a9       	ldd	r21, Y+52	; 0x34
    1798:	21 50       	subi	r18, 0x01	; 1
    179a:	30 40       	sbci	r19, 0x00	; 0
    179c:	40 40       	sbci	r20, 0x00	; 0
    179e:	50 40       	sbci	r21, 0x00	; 0
    17a0:	29 ab       	std	Y+49, r18	; 0x31
    17a2:	3a ab       	std	Y+50, r19	; 0x32
    17a4:	4b ab       	std	Y+51, r20	; 0x33
    17a6:	5c ab       	std	Y+52, r21	; 0x34
    17a8:	8e 0d       	add	r24, r14
    17aa:	9f 1d       	adc	r25, r15
    17ac:	a0 1f       	adc	r26, r16
    17ae:	b1 1f       	adc	r27, r17
    17b0:	8e 15       	cp	r24, r14
    17b2:	9f 05       	cpc	r25, r15
    17b4:	a0 07       	cpc	r26, r16
    17b6:	b1 07       	cpc	r27, r17
    17b8:	88 f0       	brcs	.+34     	; 0x17dc <__udivdi3+0x73a>
    17ba:	88 15       	cp	r24, r8
    17bc:	99 05       	cpc	r25, r9
    17be:	aa 05       	cpc	r26, r10
    17c0:	bb 05       	cpc	r27, r11
    17c2:	60 f4       	brcc	.+24     	; 0x17dc <__udivdi3+0x73a>
    17c4:	21 50       	subi	r18, 0x01	; 1
    17c6:	30 40       	sbci	r19, 0x00	; 0
    17c8:	40 40       	sbci	r20, 0x00	; 0
    17ca:	50 40       	sbci	r21, 0x00	; 0
    17cc:	29 ab       	std	Y+49, r18	; 0x31
    17ce:	3a ab       	std	Y+50, r19	; 0x32
    17d0:	4b ab       	std	Y+51, r20	; 0x33
    17d2:	5c ab       	std	Y+52, r21	; 0x34
    17d4:	8e 0d       	add	r24, r14
    17d6:	9f 1d       	adc	r25, r15
    17d8:	a0 1f       	adc	r26, r16
    17da:	b1 1f       	adc	r27, r17
    17dc:	4c 01       	movw	r8, r24
    17de:	5d 01       	movw	r10, r26
    17e0:	2d a5       	ldd	r18, Y+45	; 0x2d
    17e2:	3e a5       	ldd	r19, Y+46	; 0x2e
    17e4:	4f a5       	ldd	r20, Y+47	; 0x2f
    17e6:	58 a9       	ldd	r21, Y+48	; 0x30
    17e8:	82 1a       	sub	r8, r18
    17ea:	93 0a       	sbc	r9, r19
    17ec:	a4 0a       	sbc	r10, r20
    17ee:	b5 0a       	sbc	r11, r21
    17f0:	89 8e       	std	Y+25, r8	; 0x19
    17f2:	9a 8e       	std	Y+26, r9	; 0x1a
    17f4:	ab 8e       	std	Y+27, r10	; 0x1b
    17f6:	bc 8e       	std	Y+28, r11	; 0x1c
    17f8:	c5 01       	movw	r24, r10
    17fa:	b4 01       	movw	r22, r8
    17fc:	2d a1       	ldd	r18, Y+37	; 0x25
    17fe:	3e a1       	ldd	r19, Y+38	; 0x26
    1800:	4f a1       	ldd	r20, Y+39	; 0x27
    1802:	58 a5       	ldd	r21, Y+40	; 0x28
    1804:	09 d3       	rcall	.+1554   	; 0x1e18 <__udivmodsi4>
    1806:	5b 01       	movw	r10, r22
    1808:	6c 01       	movw	r12, r24
    180a:	69 8d       	ldd	r22, Y+25	; 0x19
    180c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    180e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1810:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1812:	2d a1       	ldd	r18, Y+37	; 0x25
    1814:	3e a1       	ldd	r19, Y+38	; 0x26
    1816:	4f a1       	ldd	r20, Y+39	; 0x27
    1818:	58 a5       	ldd	r21, Y+40	; 0x28
    181a:	fe d2       	rcall	.+1532   	; 0x1e18 <__udivmodsi4>
    181c:	29 8f       	std	Y+25, r18	; 0x19
    181e:	3a 8f       	std	Y+26, r19	; 0x1a
    1820:	4b 8f       	std	Y+27, r20	; 0x1b
    1822:	5c 8f       	std	Y+28, r21	; 0x1c
    1824:	ca 01       	movw	r24, r20
    1826:	b9 01       	movw	r22, r18
    1828:	29 a5       	ldd	r18, Y+41	; 0x29
    182a:	3a a5       	ldd	r19, Y+42	; 0x2a
    182c:	4b a5       	ldd	r20, Y+43	; 0x2b
    182e:	5c a5       	ldd	r21, Y+44	; 0x2c
    1830:	da d2       	rcall	.+1460   	; 0x1de6 <__mulsi3>
    1832:	ab 01       	movw	r20, r22
    1834:	bc 01       	movw	r22, r24
    1836:	d5 01       	movw	r26, r10
    1838:	99 27       	eor	r25, r25
    183a:	88 27       	eor	r24, r24
    183c:	8d 8f       	std	Y+29, r24	; 0x1d
    183e:	9e 8f       	std	Y+30, r25	; 0x1e
    1840:	af 8f       	std	Y+31, r26	; 0x1f
    1842:	b8 a3       	std	Y+32, r27	; 0x20
    1844:	89 a1       	ldd	r24, Y+33	; 0x21
    1846:	9a a1       	ldd	r25, Y+34	; 0x22
    1848:	ab a1       	ldd	r26, Y+35	; 0x23
    184a:	bc a1       	ldd	r27, Y+36	; 0x24
    184c:	a0 70       	andi	r26, 0x00	; 0
    184e:	b0 70       	andi	r27, 0x00	; 0
    1850:	8d 8c       	ldd	r8, Y+29	; 0x1d
    1852:	9e 8c       	ldd	r9, Y+30	; 0x1e
    1854:	af 8c       	ldd	r10, Y+31	; 0x1f
    1856:	b8 a0       	ldd	r11, Y+32	; 0x20
    1858:	88 2a       	or	r8, r24
    185a:	99 2a       	or	r9, r25
    185c:	aa 2a       	or	r10, r26
    185e:	bb 2a       	or	r11, r27
    1860:	84 16       	cp	r8, r20
    1862:	95 06       	cpc	r9, r21
    1864:	a6 06       	cpc	r10, r22
    1866:	b7 06       	cpc	r11, r23
    1868:	38 f5       	brcc	.+78     	; 0x18b8 <__udivdi3+0x816>
    186a:	89 8d       	ldd	r24, Y+25	; 0x19
    186c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    186e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1870:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	a1 09       	sbc	r26, r1
    1876:	b1 09       	sbc	r27, r1
    1878:	89 8f       	std	Y+25, r24	; 0x19
    187a:	9a 8f       	std	Y+26, r25	; 0x1a
    187c:	ab 8f       	std	Y+27, r26	; 0x1b
    187e:	bc 8f       	std	Y+28, r27	; 0x1c
    1880:	d5 01       	movw	r26, r10
    1882:	c4 01       	movw	r24, r8
    1884:	8e 0d       	add	r24, r14
    1886:	9f 1d       	adc	r25, r15
    1888:	a0 1f       	adc	r26, r16
    188a:	b1 1f       	adc	r27, r17
    188c:	8e 15       	cp	r24, r14
    188e:	9f 05       	cpc	r25, r15
    1890:	a0 07       	cpc	r26, r16
    1892:	b1 07       	cpc	r27, r17
    1894:	88 f0       	brcs	.+34     	; 0x18b8 <__udivdi3+0x816>
    1896:	84 17       	cp	r24, r20
    1898:	95 07       	cpc	r25, r21
    189a:	a6 07       	cpc	r26, r22
    189c:	b7 07       	cpc	r27, r23
    189e:	60 f4       	brcc	.+24     	; 0x18b8 <__udivdi3+0x816>
    18a0:	09 8d       	ldd	r16, Y+25	; 0x19
    18a2:	1a 8d       	ldd	r17, Y+26	; 0x1a
    18a4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    18a6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    18a8:	01 50       	subi	r16, 0x01	; 1
    18aa:	10 40       	sbci	r17, 0x00	; 0
    18ac:	20 40       	sbci	r18, 0x00	; 0
    18ae:	30 40       	sbci	r19, 0x00	; 0
    18b0:	09 8f       	std	Y+25, r16	; 0x19
    18b2:	1a 8f       	std	Y+26, r17	; 0x1a
    18b4:	2b 8f       	std	Y+27, r18	; 0x1b
    18b6:	3c 8f       	std	Y+28, r19	; 0x1c
    18b8:	29 a9       	ldd	r18, Y+49	; 0x31
    18ba:	3a a9       	ldd	r19, Y+50	; 0x32
    18bc:	4b a9       	ldd	r20, Y+51	; 0x33
    18be:	5c a9       	ldd	r21, Y+52	; 0x34
    18c0:	59 01       	movw	r10, r18
    18c2:	99 24       	eor	r9, r9
    18c4:	88 24       	eor	r8, r8
    18c6:	89 8d       	ldd	r24, Y+25	; 0x19
    18c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18ca:	ab 8d       	ldd	r26, Y+27	; 0x1b
    18cc:	bc 8d       	ldd	r27, Y+28	; 0x1c
    18ce:	88 2a       	or	r8, r24
    18d0:	99 2a       	or	r9, r25
    18d2:	aa 2a       	or	r10, r26
    18d4:	bb 2a       	or	r11, r27
    18d6:	59 c2       	rjmp	.+1202   	; 0x1d8a <__udivdi3+0xce8>
    18d8:	a4 14       	cp	r10, r4
    18da:	b5 04       	cpc	r11, r5
    18dc:	c6 04       	cpc	r12, r6
    18de:	d7 04       	cpc	r13, r7
    18e0:	08 f4       	brcc	.+2      	; 0x18e4 <__udivdi3+0x842>
    18e2:	49 c2       	rjmp	.+1170   	; 0x1d76 <__udivdi3+0xcd4>
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	49 16       	cp	r4, r25
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	59 06       	cpc	r5, r25
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	69 06       	cpc	r6, r25
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	79 06       	cpc	r7, r25
    18f4:	80 f4       	brcc	.+32     	; 0x1916 <__udivdi3+0x874>
    18f6:	af ef       	ldi	r26, 0xFF	; 255
    18f8:	4a 16       	cp	r4, r26
    18fa:	51 04       	cpc	r5, r1
    18fc:	61 04       	cpc	r6, r1
    18fe:	71 04       	cpc	r7, r1
    1900:	31 f0       	breq	.+12     	; 0x190e <__udivdi3+0x86c>
    1902:	28 f0       	brcs	.+10     	; 0x190e <__udivdi3+0x86c>
    1904:	88 e0       	ldi	r24, 0x08	; 8
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a0 e0       	ldi	r26, 0x00	; 0
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	16 c0       	rjmp	.+44     	; 0x193a <__udivdi3+0x898>
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	dc 01       	movw	r26, r24
    1914:	12 c0       	rjmp	.+36     	; 0x193a <__udivdi3+0x898>
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	4b 16       	cp	r4, r27
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	5b 06       	cpc	r5, r27
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	6b 06       	cpc	r6, r27
    1922:	b1 e0       	ldi	r27, 0x01	; 1
    1924:	7b 06       	cpc	r7, r27
    1926:	28 f0       	brcs	.+10     	; 0x1932 <__udivdi3+0x890>
    1928:	88 e1       	ldi	r24, 0x18	; 24
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a0 e0       	ldi	r26, 0x00	; 0
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	04 c0       	rjmp	.+8      	; 0x193a <__udivdi3+0x898>
    1932:	80 e1       	ldi	r24, 0x10	; 16
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e0       	ldi	r26, 0x00	; 0
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	a3 01       	movw	r20, r6
    193c:	92 01       	movw	r18, r4
    193e:	08 2e       	mov	r0, r24
    1940:	04 c0       	rjmp	.+8      	; 0x194a <__udivdi3+0x8a8>
    1942:	56 95       	lsr	r21
    1944:	47 95       	ror	r20
    1946:	37 95       	ror	r19
    1948:	27 95       	ror	r18
    194a:	0a 94       	dec	r0
    194c:	d2 f7       	brpl	.-12     	; 0x1942 <__udivdi3+0x8a0>
    194e:	f9 01       	movw	r30, r18
    1950:	ec 59       	subi	r30, 0x9C	; 156
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	20 81       	ld	r18, Z
    1956:	82 0f       	add	r24, r18
    1958:	91 1d       	adc	r25, r1
    195a:	a1 1d       	adc	r26, r1
    195c:	b1 1d       	adc	r27, r1
    195e:	20 e2       	ldi	r18, 0x20	; 32
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e0       	ldi	r20, 0x00	; 0
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	28 1b       	sub	r18, r24
    1968:	39 0b       	sbc	r19, r25
    196a:	4a 0b       	sbc	r20, r26
    196c:	5b 0b       	sbc	r21, r27
    196e:	89 f4       	brne	.+34     	; 0x1992 <__udivdi3+0x8f0>
    1970:	4a 14       	cp	r4, r10
    1972:	5b 04       	cpc	r5, r11
    1974:	6c 04       	cpc	r6, r12
    1976:	7d 04       	cpc	r7, r13
    1978:	08 f4       	brcc	.+2      	; 0x197c <__udivdi3+0x8da>
    197a:	f4 c1       	rjmp	.+1000   	; 0x1d64 <__udivdi3+0xcc2>
    197c:	49 a0       	ldd	r4, Y+33	; 0x21
    197e:	5a a0       	ldd	r5, Y+34	; 0x22
    1980:	6b a0       	ldd	r6, Y+35	; 0x23
    1982:	7c a0       	ldd	r7, Y+36	; 0x24
    1984:	4e 14       	cp	r4, r14
    1986:	5f 04       	cpc	r5, r15
    1988:	60 06       	cpc	r6, r16
    198a:	71 06       	cpc	r7, r17
    198c:	08 f0       	brcs	.+2      	; 0x1990 <__udivdi3+0x8ee>
    198e:	ea c1       	rjmp	.+980    	; 0x1d64 <__udivdi3+0xcc2>
    1990:	f2 c1       	rjmp	.+996    	; 0x1d76 <__udivdi3+0xcd4>
    1992:	22 2e       	mov	r2, r18
    1994:	04 c0       	rjmp	.+8      	; 0x199e <__udivdi3+0x8fc>
    1996:	44 0c       	add	r4, r4
    1998:	55 1c       	adc	r5, r5
    199a:	66 1c       	adc	r6, r6
    199c:	77 1c       	adc	r7, r7
    199e:	2a 95       	dec	r18
    19a0:	d2 f7       	brpl	.-12     	; 0x1996 <__udivdi3+0x8f4>
    19a2:	a8 01       	movw	r20, r16
    19a4:	97 01       	movw	r18, r14
    19a6:	08 2e       	mov	r0, r24
    19a8:	04 c0       	rjmp	.+8      	; 0x19b2 <__udivdi3+0x910>
    19aa:	56 95       	lsr	r21
    19ac:	47 95       	ror	r20
    19ae:	37 95       	ror	r19
    19b0:	27 95       	ror	r18
    19b2:	0a 94       	dec	r0
    19b4:	d2 f7       	brpl	.-12     	; 0x19aa <__udivdi3+0x908>
    19b6:	42 2a       	or	r4, r18
    19b8:	53 2a       	or	r5, r19
    19ba:	64 2a       	or	r6, r20
    19bc:	75 2a       	or	r7, r21
    19be:	a8 01       	movw	r20, r16
    19c0:	97 01       	movw	r18, r14
    19c2:	02 2c       	mov	r0, r2
    19c4:	04 c0       	rjmp	.+8      	; 0x19ce <__udivdi3+0x92c>
    19c6:	22 0f       	add	r18, r18
    19c8:	33 1f       	adc	r19, r19
    19ca:	44 1f       	adc	r20, r20
    19cc:	55 1f       	adc	r21, r21
    19ce:	0a 94       	dec	r0
    19d0:	d2 f7       	brpl	.-12     	; 0x19c6 <__udivdi3+0x924>
    19d2:	29 a7       	std	Y+41, r18	; 0x29
    19d4:	3a a7       	std	Y+42, r19	; 0x2a
    19d6:	4b a7       	std	Y+43, r20	; 0x2b
    19d8:	5c a7       	std	Y+44, r21	; 0x2c
    19da:	86 01       	movw	r16, r12
    19dc:	75 01       	movw	r14, r10
    19de:	08 2e       	mov	r0, r24
    19e0:	04 c0       	rjmp	.+8      	; 0x19ea <__udivdi3+0x948>
    19e2:	16 95       	lsr	r17
    19e4:	07 95       	ror	r16
    19e6:	f7 94       	ror	r15
    19e8:	e7 94       	ror	r14
    19ea:	0a 94       	dec	r0
    19ec:	d2 f7       	brpl	.-12     	; 0x19e2 <__udivdi3+0x940>
    19ee:	02 2c       	mov	r0, r2
    19f0:	04 c0       	rjmp	.+8      	; 0x19fa <__udivdi3+0x958>
    19f2:	aa 0c       	add	r10, r10
    19f4:	bb 1c       	adc	r11, r11
    19f6:	cc 1c       	adc	r12, r12
    19f8:	dd 1c       	adc	r13, r13
    19fa:	0a 94       	dec	r0
    19fc:	d2 f7       	brpl	.-12     	; 0x19f2 <__udivdi3+0x950>
    19fe:	29 a1       	ldd	r18, Y+33	; 0x21
    1a00:	3a a1       	ldd	r19, Y+34	; 0x22
    1a02:	4b a1       	ldd	r20, Y+35	; 0x23
    1a04:	5c a1       	ldd	r21, Y+36	; 0x24
    1a06:	04 c0       	rjmp	.+8      	; 0x1a10 <__udivdi3+0x96e>
    1a08:	56 95       	lsr	r21
    1a0a:	47 95       	ror	r20
    1a0c:	37 95       	ror	r19
    1a0e:	27 95       	ror	r18
    1a10:	8a 95       	dec	r24
    1a12:	d2 f7       	brpl	.-12     	; 0x1a08 <__udivdi3+0x966>
    1a14:	da 01       	movw	r26, r20
    1a16:	c9 01       	movw	r24, r18
    1a18:	a6 01       	movw	r20, r12
    1a1a:	95 01       	movw	r18, r10
    1a1c:	28 2b       	or	r18, r24
    1a1e:	39 2b       	or	r19, r25
    1a20:	4a 2b       	or	r20, r26
    1a22:	5b 2b       	or	r21, r27
    1a24:	2d 8f       	std	Y+29, r18	; 0x1d
    1a26:	3e 8f       	std	Y+30, r19	; 0x1e
    1a28:	4f 8f       	std	Y+31, r20	; 0x1f
    1a2a:	58 a3       	std	Y+32, r21	; 0x20
    1a2c:	c3 01       	movw	r24, r6
    1a2e:	aa 27       	eor	r26, r26
    1a30:	bb 27       	eor	r27, r27
    1a32:	8d ab       	std	Y+53, r24	; 0x35
    1a34:	9e ab       	std	Y+54, r25	; 0x36
    1a36:	af ab       	std	Y+55, r26	; 0x37
    1a38:	b8 af       	std	Y+56, r27	; 0x38
    1a3a:	a3 01       	movw	r20, r6
    1a3c:	92 01       	movw	r18, r4
    1a3e:	40 70       	andi	r20, 0x00	; 0
    1a40:	50 70       	andi	r21, 0x00	; 0
    1a42:	2d a7       	std	Y+45, r18	; 0x2d
    1a44:	3e a7       	std	Y+46, r19	; 0x2e
    1a46:	4f a7       	std	Y+47, r20	; 0x2f
    1a48:	58 ab       	std	Y+48, r21	; 0x30
    1a4a:	c8 01       	movw	r24, r16
    1a4c:	b7 01       	movw	r22, r14
    1a4e:	2d a9       	ldd	r18, Y+53	; 0x35
    1a50:	3e a9       	ldd	r19, Y+54	; 0x36
    1a52:	4f a9       	ldd	r20, Y+55	; 0x37
    1a54:	58 ad       	ldd	r21, Y+56	; 0x38
    1a56:	e0 d1       	rcall	.+960    	; 0x1e18 <__udivmodsi4>
    1a58:	69 8f       	std	Y+25, r22	; 0x19
    1a5a:	7a 8f       	std	Y+26, r23	; 0x1a
    1a5c:	8b 8f       	std	Y+27, r24	; 0x1b
    1a5e:	9c 8f       	std	Y+28, r25	; 0x1c
    1a60:	c8 01       	movw	r24, r16
    1a62:	b7 01       	movw	r22, r14
    1a64:	2d a9       	ldd	r18, Y+53	; 0x35
    1a66:	3e a9       	ldd	r19, Y+54	; 0x36
    1a68:	4f a9       	ldd	r20, Y+55	; 0x37
    1a6a:	58 ad       	ldd	r21, Y+56	; 0x38
    1a6c:	d5 d1       	rcall	.+938    	; 0x1e18 <__udivmodsi4>
    1a6e:	e2 2e       	mov	r14, r18
    1a70:	f3 2e       	mov	r15, r19
    1a72:	04 2f       	mov	r16, r20
    1a74:	15 2f       	mov	r17, r21
    1a76:	c8 01       	movw	r24, r16
    1a78:	b7 01       	movw	r22, r14
    1a7a:	2d a5       	ldd	r18, Y+45	; 0x2d
    1a7c:	3e a5       	ldd	r19, Y+46	; 0x2e
    1a7e:	4f a5       	ldd	r20, Y+47	; 0x2f
    1a80:	58 a9       	ldd	r21, Y+48	; 0x30
    1a82:	b1 d1       	rcall	.+866    	; 0x1de6 <__mulsi3>
    1a84:	9b 01       	movw	r18, r22
    1a86:	69 ab       	std	Y+49, r22	; 0x31
    1a88:	3a ab       	std	Y+50, r19	; 0x32
    1a8a:	8b ab       	std	Y+51, r24	; 0x33
    1a8c:	9c ab       	std	Y+52, r25	; 0x34
    1a8e:	89 8d       	ldd	r24, Y+25	; 0x19
    1a90:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a92:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1a94:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1a96:	dc 01       	movw	r26, r24
    1a98:	99 27       	eor	r25, r25
    1a9a:	88 27       	eor	r24, r24
    1a9c:	89 8f       	std	Y+25, r24	; 0x19
    1a9e:	9a 8f       	std	Y+26, r25	; 0x1a
    1aa0:	ab 8f       	std	Y+27, r26	; 0x1b
    1aa2:	bc 8f       	std	Y+28, r27	; 0x1c
    1aa4:	ad 8c       	ldd	r10, Y+29	; 0x1d
    1aa6:	be 8c       	ldd	r11, Y+30	; 0x1e
    1aa8:	cf 8c       	ldd	r12, Y+31	; 0x1f
    1aaa:	d8 a0       	ldd	r13, Y+32	; 0x20
    1aac:	46 01       	movw	r8, r12
    1aae:	aa 24       	eor	r10, r10
    1ab0:	bb 24       	eor	r11, r11
    1ab2:	d5 01       	movw	r26, r10
    1ab4:	c4 01       	movw	r24, r8
    1ab6:	29 8d       	ldd	r18, Y+25	; 0x19
    1ab8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1aba:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1abc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1abe:	82 2b       	or	r24, r18
    1ac0:	93 2b       	or	r25, r19
    1ac2:	a4 2b       	or	r26, r20
    1ac4:	b5 2b       	or	r27, r21
    1ac6:	89 a8       	ldd	r8, Y+49	; 0x31
    1ac8:	9a a8       	ldd	r9, Y+50	; 0x32
    1aca:	ab a8       	ldd	r10, Y+51	; 0x33
    1acc:	bc a8       	ldd	r11, Y+52	; 0x34
    1ace:	88 15       	cp	r24, r8
    1ad0:	99 05       	cpc	r25, r9
    1ad2:	aa 05       	cpc	r26, r10
    1ad4:	bb 05       	cpc	r27, r11
    1ad6:	e0 f4       	brcc	.+56     	; 0x1b10 <__udivdi3+0xa6e>
    1ad8:	08 94       	sec
    1ada:	e1 08       	sbc	r14, r1
    1adc:	f1 08       	sbc	r15, r1
    1ade:	01 09       	sbc	r16, r1
    1ae0:	11 09       	sbc	r17, r1
    1ae2:	84 0d       	add	r24, r4
    1ae4:	95 1d       	adc	r25, r5
    1ae6:	a6 1d       	adc	r26, r6
    1ae8:	b7 1d       	adc	r27, r7
    1aea:	84 15       	cp	r24, r4
    1aec:	95 05       	cpc	r25, r5
    1aee:	a6 05       	cpc	r26, r6
    1af0:	b7 05       	cpc	r27, r7
    1af2:	70 f0       	brcs	.+28     	; 0x1b10 <__udivdi3+0xa6e>
    1af4:	88 15       	cp	r24, r8
    1af6:	99 05       	cpc	r25, r9
    1af8:	aa 05       	cpc	r26, r10
    1afa:	bb 05       	cpc	r27, r11
    1afc:	48 f4       	brcc	.+18     	; 0x1b10 <__udivdi3+0xa6e>
    1afe:	08 94       	sec
    1b00:	e1 08       	sbc	r14, r1
    1b02:	f1 08       	sbc	r15, r1
    1b04:	01 09       	sbc	r16, r1
    1b06:	11 09       	sbc	r17, r1
    1b08:	84 0d       	add	r24, r4
    1b0a:	95 1d       	adc	r25, r5
    1b0c:	a6 1d       	adc	r26, r6
    1b0e:	b7 1d       	adc	r27, r7
    1b10:	5c 01       	movw	r10, r24
    1b12:	6d 01       	movw	r12, r26
    1b14:	29 a9       	ldd	r18, Y+49	; 0x31
    1b16:	3a a9       	ldd	r19, Y+50	; 0x32
    1b18:	4b a9       	ldd	r20, Y+51	; 0x33
    1b1a:	5c a9       	ldd	r21, Y+52	; 0x34
    1b1c:	a2 1a       	sub	r10, r18
    1b1e:	b3 0a       	sbc	r11, r19
    1b20:	c4 0a       	sbc	r12, r20
    1b22:	d5 0a       	sbc	r13, r21
    1b24:	ad a2       	std	Y+37, r10	; 0x25
    1b26:	be a2       	std	Y+38, r11	; 0x26
    1b28:	cf a2       	std	Y+39, r12	; 0x27
    1b2a:	d8 a6       	std	Y+40, r13	; 0x28
    1b2c:	c6 01       	movw	r24, r12
    1b2e:	b5 01       	movw	r22, r10
    1b30:	2d a9       	ldd	r18, Y+53	; 0x35
    1b32:	3e a9       	ldd	r19, Y+54	; 0x36
    1b34:	4f a9       	ldd	r20, Y+55	; 0x37
    1b36:	58 ad       	ldd	r21, Y+56	; 0x38
    1b38:	6f d1       	rcall	.+734    	; 0x1e18 <__udivmodsi4>
    1b3a:	69 8f       	std	Y+25, r22	; 0x19
    1b3c:	7a 8f       	std	Y+26, r23	; 0x1a
    1b3e:	8b 8f       	std	Y+27, r24	; 0x1b
    1b40:	9c 8f       	std	Y+28, r25	; 0x1c
    1b42:	c6 01       	movw	r24, r12
    1b44:	b5 01       	movw	r22, r10
    1b46:	2d a9       	ldd	r18, Y+53	; 0x35
    1b48:	3e a9       	ldd	r19, Y+54	; 0x36
    1b4a:	4f a9       	ldd	r20, Y+55	; 0x37
    1b4c:	58 ad       	ldd	r21, Y+56	; 0x38
    1b4e:	64 d1       	rcall	.+712    	; 0x1e18 <__udivmodsi4>
    1b50:	82 2e       	mov	r8, r18
    1b52:	93 2e       	mov	r9, r19
    1b54:	a4 2e       	mov	r10, r20
    1b56:	b5 2e       	mov	r11, r21
    1b58:	c5 01       	movw	r24, r10
    1b5a:	b4 01       	movw	r22, r8
    1b5c:	2d a5       	ldd	r18, Y+45	; 0x2d
    1b5e:	3e a5       	ldd	r19, Y+46	; 0x2e
    1b60:	4f a5       	ldd	r20, Y+47	; 0x2f
    1b62:	58 a9       	ldd	r21, Y+48	; 0x30
    1b64:	40 d1       	rcall	.+640    	; 0x1de6 <__mulsi3>
    1b66:	9b 01       	movw	r18, r22
    1b68:	6d a3       	std	Y+37, r22	; 0x25
    1b6a:	3e a3       	std	Y+38, r19	; 0x26
    1b6c:	8f a3       	std	Y+39, r24	; 0x27
    1b6e:	98 a7       	std	Y+40, r25	; 0x28
    1b70:	89 8d       	ldd	r24, Y+25	; 0x19
    1b72:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b74:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1b76:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1b78:	dc 01       	movw	r26, r24
    1b7a:	99 27       	eor	r25, r25
    1b7c:	88 27       	eor	r24, r24
    1b7e:	89 8f       	std	Y+25, r24	; 0x19
    1b80:	9a 8f       	std	Y+26, r25	; 0x1a
    1b82:	ab 8f       	std	Y+27, r26	; 0x1b
    1b84:	bc 8f       	std	Y+28, r27	; 0x1c
    1b86:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1b88:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1b8a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1b8c:	58 a1       	ldd	r21, Y+32	; 0x20
    1b8e:	40 70       	andi	r20, 0x00	; 0
    1b90:	50 70       	andi	r21, 0x00	; 0
    1b92:	82 2b       	or	r24, r18
    1b94:	93 2b       	or	r25, r19
    1b96:	a4 2b       	or	r26, r20
    1b98:	b5 2b       	or	r27, r21
    1b9a:	2d a1       	ldd	r18, Y+37	; 0x25
    1b9c:	3e a1       	ldd	r19, Y+38	; 0x26
    1b9e:	4f a1       	ldd	r20, Y+39	; 0x27
    1ba0:	58 a5       	ldd	r21, Y+40	; 0x28
    1ba2:	82 17       	cp	r24, r18
    1ba4:	93 07       	cpc	r25, r19
    1ba6:	a4 07       	cpc	r26, r20
    1ba8:	b5 07       	cpc	r27, r21
    1baa:	e0 f4       	brcc	.+56     	; 0x1be4 <__udivdi3+0xb42>
    1bac:	08 94       	sec
    1bae:	81 08       	sbc	r8, r1
    1bb0:	91 08       	sbc	r9, r1
    1bb2:	a1 08       	sbc	r10, r1
    1bb4:	b1 08       	sbc	r11, r1
    1bb6:	84 0d       	add	r24, r4
    1bb8:	95 1d       	adc	r25, r5
    1bba:	a6 1d       	adc	r26, r6
    1bbc:	b7 1d       	adc	r27, r7
    1bbe:	84 15       	cp	r24, r4
    1bc0:	95 05       	cpc	r25, r5
    1bc2:	a6 05       	cpc	r26, r6
    1bc4:	b7 05       	cpc	r27, r7
    1bc6:	70 f0       	brcs	.+28     	; 0x1be4 <__udivdi3+0xb42>
    1bc8:	82 17       	cp	r24, r18
    1bca:	93 07       	cpc	r25, r19
    1bcc:	a4 07       	cpc	r26, r20
    1bce:	b5 07       	cpc	r27, r21
    1bd0:	48 f4       	brcc	.+18     	; 0x1be4 <__udivdi3+0xb42>
    1bd2:	08 94       	sec
    1bd4:	81 08       	sbc	r8, r1
    1bd6:	91 08       	sbc	r9, r1
    1bd8:	a1 08       	sbc	r10, r1
    1bda:	b1 08       	sbc	r11, r1
    1bdc:	84 0d       	add	r24, r4
    1bde:	95 1d       	adc	r25, r5
    1be0:	a6 1d       	adc	r26, r6
    1be2:	b7 1d       	adc	r27, r7
    1be4:	2c 01       	movw	r4, r24
    1be6:	3d 01       	movw	r6, r26
    1be8:	2d a1       	ldd	r18, Y+37	; 0x25
    1bea:	3e a1       	ldd	r19, Y+38	; 0x26
    1bec:	4f a1       	ldd	r20, Y+39	; 0x27
    1bee:	58 a5       	ldd	r21, Y+40	; 0x28
    1bf0:	42 1a       	sub	r4, r18
    1bf2:	53 0a       	sbc	r5, r19
    1bf4:	64 0a       	sbc	r6, r20
    1bf6:	75 0a       	sbc	r7, r21
    1bf8:	4d a2       	std	Y+37, r4	; 0x25
    1bfa:	5e a2       	std	Y+38, r5	; 0x26
    1bfc:	6f a2       	std	Y+39, r6	; 0x27
    1bfe:	78 a6       	std	Y+40, r7	; 0x28
    1c00:	87 01       	movw	r16, r14
    1c02:	ff 24       	eor	r15, r15
    1c04:	ee 24       	eor	r14, r14
    1c06:	8e 28       	or	r8, r14
    1c08:	9f 28       	or	r9, r15
    1c0a:	a0 2a       	or	r10, r16
    1c0c:	b1 2a       	or	r11, r17
    1c0e:	af ef       	ldi	r26, 0xFF	; 255
    1c10:	ea 2e       	mov	r14, r26
    1c12:	af ef       	ldi	r26, 0xFF	; 255
    1c14:	fa 2e       	mov	r15, r26
    1c16:	01 2d       	mov	r16, r1
    1c18:	11 2d       	mov	r17, r1
    1c1a:	e8 20       	and	r14, r8
    1c1c:	f9 20       	and	r15, r9
    1c1e:	0a 21       	and	r16, r10
    1c20:	1b 21       	and	r17, r11
    1c22:	c5 01       	movw	r24, r10
    1c24:	aa 27       	eor	r26, r26
    1c26:	bb 27       	eor	r27, r27
    1c28:	8d a7       	std	Y+45, r24	; 0x2d
    1c2a:	9e a7       	std	Y+46, r25	; 0x2e
    1c2c:	af a7       	std	Y+47, r26	; 0x2f
    1c2e:	b8 ab       	std	Y+48, r27	; 0x30
    1c30:	49 a4       	ldd	r4, Y+41	; 0x29
    1c32:	5a a4       	ldd	r5, Y+42	; 0x2a
    1c34:	6b a4       	ldd	r6, Y+43	; 0x2b
    1c36:	7c a4       	ldd	r7, Y+44	; 0x2c
    1c38:	2f ef       	ldi	r18, 0xFF	; 255
    1c3a:	3f ef       	ldi	r19, 0xFF	; 255
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	42 22       	and	r4, r18
    1c42:	53 22       	and	r5, r19
    1c44:	64 22       	and	r6, r20
    1c46:	75 22       	and	r7, r21
    1c48:	89 a5       	ldd	r24, Y+41	; 0x29
    1c4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c4c:	ab a5       	ldd	r26, Y+43	; 0x2b
    1c4e:	bc a5       	ldd	r27, Y+44	; 0x2c
    1c50:	cd 01       	movw	r24, r26
    1c52:	aa 27       	eor	r26, r26
    1c54:	bb 27       	eor	r27, r27
    1c56:	89 a7       	std	Y+41, r24	; 0x29
    1c58:	9a a7       	std	Y+42, r25	; 0x2a
    1c5a:	ab a7       	std	Y+43, r26	; 0x2b
    1c5c:	bc a7       	std	Y+44, r27	; 0x2c
    1c5e:	c8 01       	movw	r24, r16
    1c60:	b7 01       	movw	r22, r14
    1c62:	a3 01       	movw	r20, r6
    1c64:	92 01       	movw	r18, r4
    1c66:	bf d0       	rcall	.+382    	; 0x1de6 <__mulsi3>
    1c68:	69 8f       	std	Y+25, r22	; 0x19
    1c6a:	7a 8f       	std	Y+26, r23	; 0x1a
    1c6c:	8b 8f       	std	Y+27, r24	; 0x1b
    1c6e:	9c 8f       	std	Y+28, r25	; 0x1c
    1c70:	c8 01       	movw	r24, r16
    1c72:	b7 01       	movw	r22, r14
    1c74:	29 a5       	ldd	r18, Y+41	; 0x29
    1c76:	3a a5       	ldd	r19, Y+42	; 0x2a
    1c78:	4b a5       	ldd	r20, Y+43	; 0x2b
    1c7a:	5c a5       	ldd	r21, Y+44	; 0x2c
    1c7c:	b4 d0       	rcall	.+360    	; 0x1de6 <__mulsi3>
    1c7e:	6d 8f       	std	Y+29, r22	; 0x1d
    1c80:	7e 8f       	std	Y+30, r23	; 0x1e
    1c82:	8f 8f       	std	Y+31, r24	; 0x1f
    1c84:	98 a3       	std	Y+32, r25	; 0x20
    1c86:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c88:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c8e:	a3 01       	movw	r20, r6
    1c90:	92 01       	movw	r18, r4
    1c92:	a9 d0       	rcall	.+338    	; 0x1de6 <__mulsi3>
    1c94:	7b 01       	movw	r14, r22
    1c96:	8c 01       	movw	r16, r24
    1c98:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c9a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca0:	29 a5       	ldd	r18, Y+41	; 0x29
    1ca2:	3a a5       	ldd	r19, Y+42	; 0x2a
    1ca4:	4b a5       	ldd	r20, Y+43	; 0x2b
    1ca6:	5c a5       	ldd	r21, Y+44	; 0x2c
    1ca8:	9e d0       	rcall	.+316    	; 0x1de6 <__mulsi3>
    1caa:	47 2f       	mov	r20, r23
    1cac:	38 2f       	mov	r19, r24
    1cae:	29 2f       	mov	r18, r25
    1cb0:	86 2f       	mov	r24, r22
    1cb2:	94 2f       	mov	r25, r20
    1cb4:	a3 2f       	mov	r26, r19
    1cb6:	b2 2f       	mov	r27, r18
    1cb8:	4d 8c       	ldd	r4, Y+29	; 0x1d
    1cba:	5e 8c       	ldd	r5, Y+30	; 0x1e
    1cbc:	6f 8c       	ldd	r6, Y+31	; 0x1f
    1cbe:	78 a0       	ldd	r7, Y+32	; 0x20
    1cc0:	4e 0c       	add	r4, r14
    1cc2:	5f 1c       	adc	r5, r15
    1cc4:	60 1e       	adc	r6, r16
    1cc6:	71 1e       	adc	r7, r17
    1cc8:	29 8d       	ldd	r18, Y+25	; 0x19
    1cca:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1ccc:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1cce:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1cd0:	9a 01       	movw	r18, r20
    1cd2:	44 27       	eor	r20, r20
    1cd4:	55 27       	eor	r21, r21
    1cd6:	24 0d       	add	r18, r4
    1cd8:	35 1d       	adc	r19, r5
    1cda:	46 1d       	adc	r20, r6
    1cdc:	57 1d       	adc	r21, r7
    1cde:	2e 15       	cp	r18, r14
    1ce0:	3f 05       	cpc	r19, r15
    1ce2:	40 07       	cpc	r20, r16
    1ce4:	51 07       	cpc	r21, r17
    1ce6:	20 f4       	brcc	.+8      	; 0x1cf0 <__udivdi3+0xc4e>
    1ce8:	80 50       	subi	r24, 0x00	; 0
    1cea:	90 40       	sbci	r25, 0x00	; 0
    1cec:	af 4f       	sbci	r26, 0xFF	; 255
    1cee:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf0:	7a 01       	movw	r14, r20
    1cf2:	00 27       	eor	r16, r16
    1cf4:	11 27       	eor	r17, r17
    1cf6:	8e 0d       	add	r24, r14
    1cf8:	9f 1d       	adc	r25, r15
    1cfa:	a0 1f       	adc	r26, r16
    1cfc:	b1 1f       	adc	r27, r17
    1cfe:	4d a0       	ldd	r4, Y+37	; 0x25
    1d00:	5e a0       	ldd	r5, Y+38	; 0x26
    1d02:	6f a0       	ldd	r6, Y+39	; 0x27
    1d04:	78 a4       	ldd	r7, Y+40	; 0x28
    1d06:	48 16       	cp	r4, r24
    1d08:	59 06       	cpc	r5, r25
    1d0a:	6a 06       	cpc	r6, r26
    1d0c:	7b 06       	cpc	r7, r27
    1d0e:	20 f1       	brcs	.+72     	; 0x1d58 <__udivdi3+0xcb6>
    1d10:	84 15       	cp	r24, r4
    1d12:	95 05       	cpc	r25, r5
    1d14:	a6 05       	cpc	r26, r6
    1d16:	b7 05       	cpc	r27, r7
    1d18:	a9 f5       	brne	.+106    	; 0x1d84 <__udivdi3+0xce2>
    1d1a:	a9 01       	movw	r20, r18
    1d1c:	33 27       	eor	r19, r19
    1d1e:	22 27       	eor	r18, r18
    1d20:	89 8d       	ldd	r24, Y+25	; 0x19
    1d22:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d24:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1d26:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1d28:	a0 70       	andi	r26, 0x00	; 0
    1d2a:	b0 70       	andi	r27, 0x00	; 0
    1d2c:	28 0f       	add	r18, r24
    1d2e:	39 1f       	adc	r19, r25
    1d30:	4a 1f       	adc	r20, r26
    1d32:	5b 1f       	adc	r21, r27
    1d34:	c9 a0       	ldd	r12, Y+33	; 0x21
    1d36:	da a0       	ldd	r13, Y+34	; 0x22
    1d38:	eb a0       	ldd	r14, Y+35	; 0x23
    1d3a:	fc a0       	ldd	r15, Y+36	; 0x24
    1d3c:	04 c0       	rjmp	.+8      	; 0x1d46 <__udivdi3+0xca4>
    1d3e:	cc 0c       	add	r12, r12
    1d40:	dd 1c       	adc	r13, r13
    1d42:	ee 1c       	adc	r14, r14
    1d44:	ff 1c       	adc	r15, r15
    1d46:	2a 94       	dec	r2
    1d48:	d2 f7       	brpl	.-12     	; 0x1d3e <__udivdi3+0xc9c>
    1d4a:	16 01       	movw	r2, r12
    1d4c:	27 01       	movw	r4, r14
    1d4e:	c2 16       	cp	r12, r18
    1d50:	d3 06       	cpc	r13, r19
    1d52:	e4 06       	cpc	r14, r20
    1d54:	f5 06       	cpc	r15, r21
    1d56:	b0 f4       	brcc	.+44     	; 0x1d84 <__udivdi3+0xce2>
    1d58:	08 94       	sec
    1d5a:	81 08       	sbc	r8, r1
    1d5c:	91 08       	sbc	r9, r1
    1d5e:	a1 08       	sbc	r10, r1
    1d60:	b1 08       	sbc	r11, r1
    1d62:	10 c0       	rjmp	.+32     	; 0x1d84 <__udivdi3+0xce2>
    1d64:	44 24       	eor	r4, r4
    1d66:	55 24       	eor	r5, r5
    1d68:	32 01       	movw	r6, r4
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	88 2e       	mov	r8, r24
    1d6e:	91 2c       	mov	r9, r1
    1d70:	a1 2c       	mov	r10, r1
    1d72:	b1 2c       	mov	r11, r1
    1d74:	0a c0       	rjmp	.+20     	; 0x1d8a <__udivdi3+0xce8>
    1d76:	44 24       	eor	r4, r4
    1d78:	55 24       	eor	r5, r5
    1d7a:	32 01       	movw	r6, r4
    1d7c:	88 24       	eor	r8, r8
    1d7e:	99 24       	eor	r9, r9
    1d80:	54 01       	movw	r10, r8
    1d82:	03 c0       	rjmp	.+6      	; 0x1d8a <__udivdi3+0xce8>
    1d84:	44 24       	eor	r4, r4
    1d86:	55 24       	eor	r5, r5
    1d88:	32 01       	movw	r6, r4
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	71 96       	adiw	r30, 0x11	; 17
    1d8e:	88 e0       	ldi	r24, 0x08	; 8
    1d90:	df 01       	movw	r26, r30
    1d92:	1d 92       	st	X+, r1
    1d94:	8a 95       	dec	r24
    1d96:	e9 f7       	brne	.-6      	; 0x1d92 <__udivdi3+0xcf0>
    1d98:	89 8a       	std	Y+17, r8	; 0x11
    1d9a:	9a 8a       	std	Y+18, r9	; 0x12
    1d9c:	ab 8a       	std	Y+19, r10	; 0x13
    1d9e:	bc 8a       	std	Y+20, r11	; 0x14
    1da0:	4d 8a       	std	Y+21, r4	; 0x15
    1da2:	5e 8a       	std	Y+22, r5	; 0x16
    1da4:	6f 8a       	std	Y+23, r6	; 0x17
    1da6:	78 8e       	std	Y+24, r7	; 0x18
    1da8:	28 2d       	mov	r18, r8
    1daa:	3a 89       	ldd	r19, Y+18	; 0x12
    1dac:	4b 89       	ldd	r20, Y+19	; 0x13
    1dae:	5c 89       	ldd	r21, Y+20	; 0x14
    1db0:	64 2d       	mov	r22, r4
    1db2:	7e 89       	ldd	r23, Y+22	; 0x16
    1db4:	8f 89       	ldd	r24, Y+23	; 0x17
    1db6:	98 8d       	ldd	r25, Y+24	; 0x18
    1db8:	e8 96       	adiw	r28, 0x38	; 56
    1dba:	e2 e1       	ldi	r30, 0x12	; 18
    1dbc:	6b c0       	rjmp	.+214    	; 0x1e94 <__epilogue_restores__>

00001dbe <__udivmodhi4>:
    1dbe:	aa 1b       	sub	r26, r26
    1dc0:	bb 1b       	sub	r27, r27
    1dc2:	51 e1       	ldi	r21, 0x11	; 17
    1dc4:	07 c0       	rjmp	.+14     	; 0x1dd4 <__udivmodhi4_ep>

00001dc6 <__udivmodhi4_loop>:
    1dc6:	aa 1f       	adc	r26, r26
    1dc8:	bb 1f       	adc	r27, r27
    1dca:	a6 17       	cp	r26, r22
    1dcc:	b7 07       	cpc	r27, r23
    1dce:	10 f0       	brcs	.+4      	; 0x1dd4 <__udivmodhi4_ep>
    1dd0:	a6 1b       	sub	r26, r22
    1dd2:	b7 0b       	sbc	r27, r23

00001dd4 <__udivmodhi4_ep>:
    1dd4:	88 1f       	adc	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	5a 95       	dec	r21
    1dda:	a9 f7       	brne	.-22     	; 0x1dc6 <__udivmodhi4_loop>
    1ddc:	80 95       	com	r24
    1dde:	90 95       	com	r25
    1de0:	bc 01       	movw	r22, r24
    1de2:	cd 01       	movw	r24, r26
    1de4:	08 95       	ret

00001de6 <__mulsi3>:
    1de6:	ff 27       	eor	r31, r31
    1de8:	ee 27       	eor	r30, r30
    1dea:	bb 27       	eor	r27, r27
    1dec:	aa 27       	eor	r26, r26

00001dee <__mulsi3_loop>:
    1dee:	60 ff       	sbrs	r22, 0
    1df0:	04 c0       	rjmp	.+8      	; 0x1dfa <__mulsi3_skip1>
    1df2:	a2 0f       	add	r26, r18
    1df4:	b3 1f       	adc	r27, r19
    1df6:	e4 1f       	adc	r30, r20
    1df8:	f5 1f       	adc	r31, r21

00001dfa <__mulsi3_skip1>:
    1dfa:	22 0f       	add	r18, r18
    1dfc:	33 1f       	adc	r19, r19
    1dfe:	44 1f       	adc	r20, r20
    1e00:	55 1f       	adc	r21, r21
    1e02:	96 95       	lsr	r25
    1e04:	87 95       	ror	r24
    1e06:	77 95       	ror	r23
    1e08:	67 95       	ror	r22
    1e0a:	89 f7       	brne	.-30     	; 0x1dee <__mulsi3_loop>
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	76 07       	cpc	r23, r22
    1e10:	71 f7       	brne	.-36     	; 0x1dee <__mulsi3_loop>

00001e12 <__mulsi3_exit>:
    1e12:	cf 01       	movw	r24, r30
    1e14:	bd 01       	movw	r22, r26
    1e16:	08 95       	ret

00001e18 <__udivmodsi4>:
    1e18:	a1 e2       	ldi	r26, 0x21	; 33
    1e1a:	1a 2e       	mov	r1, r26
    1e1c:	aa 1b       	sub	r26, r26
    1e1e:	bb 1b       	sub	r27, r27
    1e20:	fd 01       	movw	r30, r26
    1e22:	0d c0       	rjmp	.+26     	; 0x1e3e <__udivmodsi4_ep>

00001e24 <__udivmodsi4_loop>:
    1e24:	aa 1f       	adc	r26, r26
    1e26:	bb 1f       	adc	r27, r27
    1e28:	ee 1f       	adc	r30, r30
    1e2a:	ff 1f       	adc	r31, r31
    1e2c:	a2 17       	cp	r26, r18
    1e2e:	b3 07       	cpc	r27, r19
    1e30:	e4 07       	cpc	r30, r20
    1e32:	f5 07       	cpc	r31, r21
    1e34:	20 f0       	brcs	.+8      	; 0x1e3e <__udivmodsi4_ep>
    1e36:	a2 1b       	sub	r26, r18
    1e38:	b3 0b       	sbc	r27, r19
    1e3a:	e4 0b       	sbc	r30, r20
    1e3c:	f5 0b       	sbc	r31, r21

00001e3e <__udivmodsi4_ep>:
    1e3e:	66 1f       	adc	r22, r22
    1e40:	77 1f       	adc	r23, r23
    1e42:	88 1f       	adc	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	1a 94       	dec	r1
    1e48:	69 f7       	brne	.-38     	; 0x1e24 <__udivmodsi4_loop>
    1e4a:	60 95       	com	r22
    1e4c:	70 95       	com	r23
    1e4e:	80 95       	com	r24
    1e50:	90 95       	com	r25
    1e52:	9b 01       	movw	r18, r22
    1e54:	ac 01       	movw	r20, r24
    1e56:	bd 01       	movw	r22, r26
    1e58:	cf 01       	movw	r24, r30
    1e5a:	08 95       	ret

00001e5c <__prologue_saves__>:
    1e5c:	2f 92       	push	r2
    1e5e:	3f 92       	push	r3
    1e60:	4f 92       	push	r4
    1e62:	5f 92       	push	r5
    1e64:	6f 92       	push	r6
    1e66:	7f 92       	push	r7
    1e68:	8f 92       	push	r8
    1e6a:	9f 92       	push	r9
    1e6c:	af 92       	push	r10
    1e6e:	bf 92       	push	r11
    1e70:	cf 92       	push	r12
    1e72:	df 92       	push	r13
    1e74:	ef 92       	push	r14
    1e76:	ff 92       	push	r15
    1e78:	0f 93       	push	r16
    1e7a:	1f 93       	push	r17
    1e7c:	cf 93       	push	r28
    1e7e:	df 93       	push	r29
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	ca 1b       	sub	r28, r26
    1e86:	db 0b       	sbc	r29, r27
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	09 94       	ijmp

00001e94 <__epilogue_restores__>:
    1e94:	2a 88       	ldd	r2, Y+18	; 0x12
    1e96:	39 88       	ldd	r3, Y+17	; 0x11
    1e98:	48 88       	ldd	r4, Y+16	; 0x10
    1e9a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e9c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e9e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ea0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ea2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ea4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ea6:	b9 84       	ldd	r11, Y+9	; 0x09
    1ea8:	c8 84       	ldd	r12, Y+8	; 0x08
    1eaa:	df 80       	ldd	r13, Y+7	; 0x07
    1eac:	ee 80       	ldd	r14, Y+6	; 0x06
    1eae:	fd 80       	ldd	r15, Y+5	; 0x05
    1eb0:	0c 81       	ldd	r16, Y+4	; 0x04
    1eb2:	1b 81       	ldd	r17, Y+3	; 0x03
    1eb4:	aa 81       	ldd	r26, Y+2	; 0x02
    1eb6:	b9 81       	ldd	r27, Y+1	; 0x01
    1eb8:	ce 0f       	add	r28, r30
    1eba:	d1 1d       	adc	r29, r1
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	ed 01       	movw	r28, r26
    1ec8:	08 95       	ret

00001eca <_exit>:
    1eca:	f8 94       	cli

00001ecc <__stop_program>:
    1ecc:	ff cf       	rjmp	.-2      	; 0x1ecc <__stop_program>
